
M3_T1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080042ec  080042ec  000142ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004358  08004358  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08004358  08004358  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004358  08004358  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004358  08004358  00014358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800435c  0800435c  0001435c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  2000005c  080043bc  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  080043bc  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d91f  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000273d  00000000  00000000  0002d9e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b50  00000000  00000000  00030128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000089c  00000000  00000000  00030c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018ae5  00000000  00000000  00031514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001034c  00000000  00000000  00049ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089011  00000000  00000000  0005a345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003134  00000000  00000000  000e3358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000e648c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080042d4 	.word	0x080042d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080042d4 	.word	0x080042d4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000162:	1d3b      	adds	r3, r7, #4
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
 8000168:	605a      	str	r2, [r3, #4]
 800016a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800016c:	4b18      	ldr	r3, [pc, #96]	; (80001d0 <MX_ADC1_Init+0x74>)
 800016e:	4a19      	ldr	r2, [pc, #100]	; (80001d4 <MX_ADC1_Init+0x78>)
 8000170:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000172:	4b17      	ldr	r3, [pc, #92]	; (80001d0 <MX_ADC1_Init+0x74>)
 8000174:	2200      	movs	r2, #0
 8000176:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000178:	4b15      	ldr	r3, [pc, #84]	; (80001d0 <MX_ADC1_Init+0x74>)
 800017a:	2200      	movs	r2, #0
 800017c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800017e:	4b14      	ldr	r3, [pc, #80]	; (80001d0 <MX_ADC1_Init+0x74>)
 8000180:	2200      	movs	r2, #0
 8000182:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <MX_ADC1_Init+0x74>)
 8000186:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800018a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800018c:	4b10      	ldr	r3, [pc, #64]	; (80001d0 <MX_ADC1_Init+0x74>)
 800018e:	2200      	movs	r2, #0
 8000190:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000192:	4b0f      	ldr	r3, [pc, #60]	; (80001d0 <MX_ADC1_Init+0x74>)
 8000194:	2201      	movs	r2, #1
 8000196:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000198:	480d      	ldr	r0, [pc, #52]	; (80001d0 <MX_ADC1_Init+0x74>)
 800019a:	f000 fcbb 	bl	8000b14 <HAL_ADC_Init>
 800019e:	4603      	mov	r3, r0
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d001      	beq.n	80001a8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80001a4:	f000 f9d7 	bl	8000556 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80001a8:	2300      	movs	r3, #0
 80001aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001ac:	2301      	movs	r3, #1
 80001ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001b0:	2300      	movs	r3, #0
 80001b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	4619      	mov	r1, r3
 80001b8:	4805      	ldr	r0, [pc, #20]	; (80001d0 <MX_ADC1_Init+0x74>)
 80001ba:	f000 ffc7 	bl	800114c <HAL_ADC_ConfigChannel>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d001      	beq.n	80001c8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001c4:	f000 f9c7 	bl	8000556 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001c8:	bf00      	nop
 80001ca:	3710      	adds	r7, #16
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	40012400 	.word	0x40012400

080001d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b088      	sub	sp, #32
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001e0:	f107 0310 	add.w	r3, r7, #16
 80001e4:	2200      	movs	r2, #0
 80001e6:	601a      	str	r2, [r3, #0]
 80001e8:	605a      	str	r2, [r3, #4]
 80001ea:	609a      	str	r2, [r3, #8]
 80001ec:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a18      	ldr	r2, [pc, #96]	; (8000254 <HAL_ADC_MspInit+0x7c>)
 80001f4:	4293      	cmp	r3, r2
 80001f6:	d129      	bne.n	800024c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001f8:	4b17      	ldr	r3, [pc, #92]	; (8000258 <HAL_ADC_MspInit+0x80>)
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	4a16      	ldr	r2, [pc, #88]	; (8000258 <HAL_ADC_MspInit+0x80>)
 80001fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000202:	6193      	str	r3, [r2, #24]
 8000204:	4b14      	ldr	r3, [pc, #80]	; (8000258 <HAL_ADC_MspInit+0x80>)
 8000206:	699b      	ldr	r3, [r3, #24]
 8000208:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800020c:	60fb      	str	r3, [r7, #12]
 800020e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000210:	4b11      	ldr	r3, [pc, #68]	; (8000258 <HAL_ADC_MspInit+0x80>)
 8000212:	699b      	ldr	r3, [r3, #24]
 8000214:	4a10      	ldr	r2, [pc, #64]	; (8000258 <HAL_ADC_MspInit+0x80>)
 8000216:	f043 0304 	orr.w	r3, r3, #4
 800021a:	6193      	str	r3, [r2, #24]
 800021c:	4b0e      	ldr	r3, [pc, #56]	; (8000258 <HAL_ADC_MspInit+0x80>)
 800021e:	699b      	ldr	r3, [r3, #24]
 8000220:	f003 0304 	and.w	r3, r3, #4
 8000224:	60bb      	str	r3, [r7, #8]
 8000226:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000228:	2301      	movs	r3, #1
 800022a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800022c:	2303      	movs	r3, #3
 800022e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000230:	f107 0310 	add.w	r3, r7, #16
 8000234:	4619      	mov	r1, r3
 8000236:	4809      	ldr	r0, [pc, #36]	; (800025c <HAL_ADC_MspInit+0x84>)
 8000238:	f001 fae4 	bl	8001804 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800023c:	2200      	movs	r2, #0
 800023e:	2100      	movs	r1, #0
 8000240:	2012      	movs	r0, #18
 8000242:	f001 f9f6 	bl	8001632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000246:	2012      	movs	r0, #18
 8000248:	f001 fa0f 	bl	800166a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800024c:	bf00      	nop
 800024e:	3720      	adds	r7, #32
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	40012400 	.word	0x40012400
 8000258:	40021000 	.word	0x40021000
 800025c:	40010800 	.word	0x40010800

08000260 <TriggerAdcInt>:
  }
}

/* USER CODE BEGIN 1 */
void TriggerAdcInt()
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);
 8000264:	4802      	ldr	r0, [pc, #8]	; (8000270 <TriggerAdcInt+0x10>)
 8000266:	f000 fdd5 	bl	8000e14 <HAL_ADC_Start_IT>
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	2000007c 	.word	0x2000007c

08000274 <AdcConversionCallback>:



void AdcConversionCallback(ADC_HandleTypeDef *hadc)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	AdcSampleValue = ADC1->DR & 0x0000FFFF;
 800027c:	4b06      	ldr	r3, [pc, #24]	; (8000298 <AdcConversionCallback+0x24>)
 800027e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000280:	b29a      	uxth	r2, r3
 8000282:	4b06      	ldr	r3, [pc, #24]	; (800029c <AdcConversionCallback+0x28>)
 8000284:	801a      	strh	r2, [r3, #0]
	AdcValueReady = true;
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <AdcConversionCallback+0x2c>)
 8000288:	2201      	movs	r2, #1
 800028a:	701a      	strb	r2, [r3, #0]
}
 800028c:	bf00      	nop
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	40012400 	.word	0x40012400
 800029c:	2000007a 	.word	0x2000007a
 80002a0:	20000078 	.word	0x20000078

080002a4 <ConsoleDebugDataFormat>:

bool DebugOutputEnabled = false;


void ConsoleDebugDataFormat()
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	sprintf(UartTxBuffer, "#DBG: %d \r\n", ConsoleDataStream.AdcValue);
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <ConsoleDebugDataFormat+0x18>)
 80002aa:	881b      	ldrh	r3, [r3, #0]
 80002ac:	461a      	mov	r2, r3
 80002ae:	4904      	ldr	r1, [pc, #16]	; (80002c0 <ConsoleDebugDataFormat+0x1c>)
 80002b0:	4804      	ldr	r0, [pc, #16]	; (80002c4 <ConsoleDebugDataFormat+0x20>)
 80002b2:	f003 fb5d 	bl	8003970 <siprintf>
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	200000c8 	.word	0x200000c8
 80002c0:	080042ec 	.word	0x080042ec
 80002c4:	20000154 	.word	0x20000154

080002c8 <ConsoleDebugDataSend>:



void ConsoleDebugDataSend()
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	if(DebugOutputEnabled)
 80002cc:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <ConsoleDebugDataSend+0x28>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d00b      	beq.n	80002ec <ConsoleDebugDataSend+0x24>
	{
		ConsoleDebugDataFormat();
 80002d4:	f7ff ffe6 	bl	80002a4 <ConsoleDebugDataFormat>
		HAL_UART_Transmit(&huart3, UartTxBuffer, strlen(UartTxBuffer), 100);
 80002d8:	4806      	ldr	r0, [pc, #24]	; (80002f4 <ConsoleDebugDataSend+0x2c>)
 80002da:	f7ff ff37 	bl	800014c <strlen>
 80002de:	4603      	mov	r3, r0
 80002e0:	b29a      	uxth	r2, r3
 80002e2:	2364      	movs	r3, #100	; 0x64
 80002e4:	4903      	ldr	r1, [pc, #12]	; (80002f4 <ConsoleDebugDataSend+0x2c>)
 80002e6:	4804      	ldr	r0, [pc, #16]	; (80002f8 <ConsoleDebugDataSend+0x30>)
 80002e8:	f002 fca4 	bl	8002c34 <HAL_UART_Transmit>
	}
}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	200000cc 	.word	0x200000cc
 80002f4:	20000154 	.word	0x20000154
 80002f8:	200001bc 	.word	0x200001bc

080002fc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b088      	sub	sp, #32
 8000300:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000302:	f107 0310 	add.w	r3, r7, #16
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000310:	4b23      	ldr	r3, [pc, #140]	; (80003a0 <MX_GPIO_Init+0xa4>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a22      	ldr	r2, [pc, #136]	; (80003a0 <MX_GPIO_Init+0xa4>)
 8000316:	f043 0310 	orr.w	r3, r3, #16
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b20      	ldr	r3, [pc, #128]	; (80003a0 <MX_GPIO_Init+0xa4>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0310 	and.w	r3, r3, #16
 8000324:	60fb      	str	r3, [r7, #12]
 8000326:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000328:	4b1d      	ldr	r3, [pc, #116]	; (80003a0 <MX_GPIO_Init+0xa4>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a1c      	ldr	r2, [pc, #112]	; (80003a0 <MX_GPIO_Init+0xa4>)
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <MX_GPIO_Init+0xa4>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0304 	and.w	r3, r3, #4
 800033c:	60bb      	str	r3, [r7, #8]
 800033e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000340:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <MX_GPIO_Init+0xa4>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a16      	ldr	r2, [pc, #88]	; (80003a0 <MX_GPIO_Init+0xa4>)
 8000346:	f043 0308 	orr.w	r3, r3, #8
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <MX_GPIO_Init+0xa4>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0308 	and.w	r3, r3, #8
 8000354:	607b      	str	r3, [r7, #4]
 8000356:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	2120      	movs	r1, #32
 800035c:	4811      	ldr	r0, [pc, #68]	; (80003a4 <MX_GPIO_Init+0xa8>)
 800035e:	f001 fbec 	bl	8001b3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000362:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000366:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000368:	2300      	movs	r3, #0
 800036a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036c:	2300      	movs	r3, #0
 800036e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000370:	f107 0310 	add.w	r3, r7, #16
 8000374:	4619      	mov	r1, r3
 8000376:	480c      	ldr	r0, [pc, #48]	; (80003a8 <MX_GPIO_Init+0xac>)
 8000378:	f001 fa44 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800037c:	2320      	movs	r3, #32
 800037e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000380:	2301      	movs	r3, #1
 8000382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000384:	2300      	movs	r3, #0
 8000386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000388:	2302      	movs	r3, #2
 800038a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800038c:	f107 0310 	add.w	r3, r7, #16
 8000390:	4619      	mov	r1, r3
 8000392:	4804      	ldr	r0, [pc, #16]	; (80003a4 <MX_GPIO_Init+0xa8>)
 8000394:	f001 fa36 	bl	8001804 <HAL_GPIO_Init>

}
 8000398:	bf00      	nop
 800039a:	3720      	adds	r7, #32
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	40021000 	.word	0x40021000
 80003a4:	40010800 	.word	0x40010800
 80003a8:	40011000 	.word	0x40011000

080003ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b2:	f000 fb29 	bl	8000a08 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b6:	f000 f877 	bl	80004a8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ba:	f7ff ff9f 	bl	80002fc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80003be:	f000 fa39 	bl	8000834 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80003c2:	f7ff fecb 	bl	800015c <MX_ADC1_Init>
  MX_SPI1_Init();
 80003c6:	f000 f8cb 	bl	8000560 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // ADC callback
  HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID, AdcConversionCallback);
 80003ca:	4a27      	ldr	r2, [pc, #156]	; (8000468 <main+0xbc>)
 80003cc:	2100      	movs	r1, #0
 80003ce:	4827      	ldr	r0, [pc, #156]	; (800046c <main+0xc0>)
 80003d0:	f000 fc9c 	bl	8000d0c <HAL_ADC_RegisterCallback>
  // UART callbacks
  HAL_UART_RegisterCallback(&huart3, HAL_UART_RX_COMPLETE_CB_ID, UartRxCallback);
 80003d4:	4a26      	ldr	r2, [pc, #152]	; (8000470 <main+0xc4>)
 80003d6:	2103      	movs	r1, #3
 80003d8:	4826      	ldr	r0, [pc, #152]	; (8000474 <main+0xc8>)
 80003da:	f002 fb95 	bl	8002b08 <HAL_UART_RegisterCallback>
  HAL_UART_RegisterCallback(&huart3, HAL_UART_TX_COMPLETE_CB_ID, UartTxCallback);
 80003de:	4a26      	ldr	r2, [pc, #152]	; (8000478 <main+0xcc>)
 80003e0:	2101      	movs	r1, #1
 80003e2:	4824      	ldr	r0, [pc, #144]	; (8000474 <main+0xc8>)
 80003e4:	f002 fb90 	bl	8002b08 <HAL_UART_RegisterCallback>
  // SPI callback
  HAL_SPI_RegisterCallback(&hspi1, HAL_SPI_RX_COMPLETE_CB_ID, SpiRxCallback);
 80003e8:	4a24      	ldr	r2, [pc, #144]	; (800047c <main+0xd0>)
 80003ea:	2101      	movs	r1, #1
 80003ec:	4824      	ldr	r0, [pc, #144]	; (8000480 <main+0xd4>)
 80003ee:	f002 f951 	bl	8002694 <HAL_SPI_RegisterCallback>
  HAL_SPI_RegisterCallback(&hspi1, HAL_SPI_TX_COMPLETE_CB_ID, SpiTxCallback);
 80003f2:	4a24      	ldr	r2, [pc, #144]	; (8000484 <main+0xd8>)
 80003f4:	2100      	movs	r1, #0
 80003f6:	4822      	ldr	r0, [pc, #136]	; (8000480 <main+0xd4>)
 80003f8:	f002 f94c 	bl	8002694 <HAL_SPI_RegisterCallback>
  // Enable RX interrupt
  HAL_UART_Receive_IT(&huart3, &UartRxValue, 1);
 80003fc:	2201      	movs	r2, #1
 80003fe:	4922      	ldr	r1, [pc, #136]	; (8000488 <main+0xdc>)
 8000400:	481c      	ldr	r0, [pc, #112]	; (8000474 <main+0xc8>)
 8000402:	f002 fc9a 	bl	8002d3a <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADC_Start_IT(&hadc1);
 8000406:	4819      	ldr	r0, [pc, #100]	; (800046c <main+0xc0>)
 8000408:	f000 fd04 	bl	8000e14 <HAL_ADC_Start_IT>
  while (1)
  {

	  if(AdcValueReady)
 800040c:	4b1f      	ldr	r3, [pc, #124]	; (800048c <main+0xe0>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d008      	beq.n	8000426 <main+0x7a>
	  {
		  AdcValueReady = false;
 8000414:	4b1d      	ldr	r3, [pc, #116]	; (800048c <main+0xe0>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
		  ConsoleDataStream.AdcValue = AdcSampleValue;
 800041a:	4b1d      	ldr	r3, [pc, #116]	; (8000490 <main+0xe4>)
 800041c:	881a      	ldrh	r2, [r3, #0]
 800041e:	4b1d      	ldr	r3, [pc, #116]	; (8000494 <main+0xe8>)
 8000420:	801a      	strh	r2, [r3, #0]
		  // Trigger ADC conversion
		  TriggerAdcInt();
 8000422:	f7ff ff1d 	bl	8000260 <TriggerAdcInt>
	  }


	  if(SpiValueReady)
 8000426:	4b1c      	ldr	r3, [pc, #112]	; (8000498 <main+0xec>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d006      	beq.n	800043c <main+0x90>
	  {
	      SpiValueReady = false;
 800042e:	4b1a      	ldr	r3, [pc, #104]	; (8000498 <main+0xec>)
 8000430:	2200      	movs	r2, #0
 8000432:	701a      	strb	r2, [r3, #0]
		  ConsoleDataStream.SpiValue = SpiValue;
 8000434:	4b19      	ldr	r3, [pc, #100]	; (800049c <main+0xf0>)
 8000436:	781a      	ldrb	r2, [r3, #0]
 8000438:	4b16      	ldr	r3, [pc, #88]	; (8000494 <main+0xe8>)
 800043a:	709a      	strb	r2, [r3, #2]

	  }


	  ConsoleDebugDataSend();
 800043c:	f7ff ff44 	bl	80002c8 <ConsoleDebugDataSend>

      // USER button
	  button = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000440:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000444:	4816      	ldr	r0, [pc, #88]	; (80004a0 <main+0xf4>)
 8000446:	f001 fb61 	bl	8001b0c <HAL_GPIO_ReadPin>
 800044a:	4603      	mov	r3, r0
 800044c:	71fb      	strb	r3, [r7, #7]
	  if(button == GPIO_PIN_RESET)
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d103      	bne.n	800045c <main+0xb0>
	  {
		  // USER led
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000454:	2120      	movs	r1, #32
 8000456:	4813      	ldr	r0, [pc, #76]	; (80004a4 <main+0xf8>)
 8000458:	f001 fb87 	bl	8001b6a <HAL_GPIO_TogglePin>
	  }

	  HAL_Delay(300);
 800045c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000460:	f000 fb34 	bl	8000acc <HAL_Delay>
	  if(AdcValueReady)
 8000464:	e7d2      	b.n	800040c <main+0x60>
 8000466:	bf00      	nop
 8000468:	08000275 	.word	0x08000275
 800046c:	2000007c 	.word	0x2000007c
 8000470:	08000969 	.word	0x08000969
 8000474:	200001bc 	.word	0x200001bc
 8000478:	08000991 	.word	0x08000991
 800047c:	080006c9 	.word	0x080006c9
 8000480:	200000d0 	.word	0x200000d0
 8000484:	080006db 	.word	0x080006db
 8000488:	200001b8 	.word	0x200001b8
 800048c:	20000078 	.word	0x20000078
 8000490:	2000007a 	.word	0x2000007a
 8000494:	200000c8 	.word	0x200000c8
 8000498:	200000ce 	.word	0x200000ce
 800049c:	200000cd 	.word	0x200000cd
 80004a0:	40011000 	.word	0x40011000
 80004a4:	40010800 	.word	0x40010800

080004a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b094      	sub	sp, #80	; 0x50
 80004ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004b2:	2228      	movs	r2, #40	; 0x28
 80004b4:	2100      	movs	r1, #0
 80004b6:	4618      	mov	r0, r3
 80004b8:	f003 fa7a 	bl	80039b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004bc:	f107 0314 	add.w	r3, r7, #20
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]
 80004ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004d8:	2302      	movs	r3, #2
 80004da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004dc:	2301      	movs	r3, #1
 80004de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004e0:	2310      	movs	r3, #16
 80004e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004e4:	2302      	movs	r3, #2
 80004e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80004e8:	2300      	movs	r3, #0
 80004ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80004ec:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80004f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004f6:	4618      	mov	r0, r3
 80004f8:	f001 fb50 	bl	8001b9c <HAL_RCC_OscConfig>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000502:	f000 f828 	bl	8000556 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000506:	230f      	movs	r3, #15
 8000508:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800050a:	2302      	movs	r3, #2
 800050c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800050e:	2300      	movs	r3, #0
 8000510:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000516:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000518:	2300      	movs	r3, #0
 800051a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800051c:	f107 0314 	add.w	r3, r7, #20
 8000520:	2102      	movs	r1, #2
 8000522:	4618      	mov	r0, r3
 8000524:	f001 fdbc 	bl	80020a0 <HAL_RCC_ClockConfig>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800052e:	f000 f812 	bl	8000556 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000532:	2302      	movs	r3, #2
 8000534:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000536:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800053a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	4618      	mov	r0, r3
 8000540:	f001 ff3c 	bl	80023bc <HAL_RCCEx_PeriphCLKConfig>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800054a:	f000 f804 	bl	8000556 <Error_Handler>
  }
}
 800054e:	bf00      	nop
 8000550:	3750      	adds	r7, #80	; 0x50
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000556:	b480      	push	{r7}
 8000558:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800055a:	b672      	cpsid	i
}
 800055c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800055e:	e7fe      	b.n	800055e <Error_Handler+0x8>

08000560 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000564:	4b17      	ldr	r3, [pc, #92]	; (80005c4 <MX_SPI1_Init+0x64>)
 8000566:	4a18      	ldr	r2, [pc, #96]	; (80005c8 <MX_SPI1_Init+0x68>)
 8000568:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800056a:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <MX_SPI1_Init+0x64>)
 800056c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000570:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000572:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <MX_SPI1_Init+0x64>)
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000578:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <MX_SPI1_Init+0x64>)
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800057e:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <MX_SPI1_Init+0x64>)
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000584:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <MX_SPI1_Init+0x64>)
 8000586:	2200      	movs	r2, #0
 8000588:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <MX_SPI1_Init+0x64>)
 800058c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000590:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <MX_SPI1_Init+0x64>)
 8000594:	2208      	movs	r2, #8
 8000596:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000598:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <MX_SPI1_Init+0x64>)
 800059a:	2200      	movs	r2, #0
 800059c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <MX_SPI1_Init+0x64>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005a4:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <MX_SPI1_Init+0x64>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <MX_SPI1_Init+0x64>)
 80005ac:	220a      	movs	r2, #10
 80005ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005b0:	4804      	ldr	r0, [pc, #16]	; (80005c4 <MX_SPI1_Init+0x64>)
 80005b2:	f001 ffb9 	bl	8002528 <HAL_SPI_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80005bc:	f7ff ffcb 	bl	8000556 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	200000d0 	.word	0x200000d0
 80005c8:	40013000 	.word	0x40013000

080005cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	; 0x28
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a33      	ldr	r2, [pc, #204]	; (80006b4 <HAL_SPI_MspInit+0xe8>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d15e      	bne.n	80006aa <HAL_SPI_MspInit+0xde>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005ec:	4b32      	ldr	r3, [pc, #200]	; (80006b8 <HAL_SPI_MspInit+0xec>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4a31      	ldr	r2, [pc, #196]	; (80006b8 <HAL_SPI_MspInit+0xec>)
 80005f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005f6:	6193      	str	r3, [r2, #24]
 80005f8:	4b2f      	ldr	r3, [pc, #188]	; (80006b8 <HAL_SPI_MspInit+0xec>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000600:	613b      	str	r3, [r7, #16]
 8000602:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000604:	4b2c      	ldr	r3, [pc, #176]	; (80006b8 <HAL_SPI_MspInit+0xec>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a2b      	ldr	r2, [pc, #172]	; (80006b8 <HAL_SPI_MspInit+0xec>)
 800060a:	f043 0304 	orr.w	r3, r3, #4
 800060e:	6193      	str	r3, [r2, #24]
 8000610:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <HAL_SPI_MspInit+0xec>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f003 0304 	and.w	r3, r3, #4
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800061c:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <HAL_SPI_MspInit+0xec>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a25      	ldr	r2, [pc, #148]	; (80006b8 <HAL_SPI_MspInit+0xec>)
 8000622:	f043 0308 	orr.w	r3, r3, #8
 8000626:	6193      	str	r3, [r2, #24]
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <HAL_SPI_MspInit+0xec>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f003 0308 	and.w	r3, r3, #8
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000634:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063a:	2302      	movs	r3, #2
 800063c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800063e:	2303      	movs	r3, #3
 8000640:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	4619      	mov	r1, r3
 8000648:	481c      	ldr	r0, [pc, #112]	; (80006bc <HAL_SPI_MspInit+0xf0>)
 800064a:	f001 f8db 	bl	8001804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800064e:	2328      	movs	r3, #40	; 0x28
 8000650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000652:	2302      	movs	r3, #2
 8000654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000656:	2303      	movs	r3, #3
 8000658:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	4619      	mov	r1, r3
 8000660:	4817      	ldr	r0, [pc, #92]	; (80006c0 <HAL_SPI_MspInit+0xf4>)
 8000662:	f001 f8cf 	bl	8001804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000666:	2310      	movs	r3, #16
 8000668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	4619      	mov	r1, r3
 8000678:	4811      	ldr	r0, [pc, #68]	; (80006c0 <HAL_SPI_MspInit+0xf4>)
 800067a:	f001 f8c3 	bl	8001804 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <HAL_SPI_MspInit+0xf8>)
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
 8000684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000686:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
 800068c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
 8000694:	4a0b      	ldr	r2, [pc, #44]	; (80006c4 <HAL_SPI_MspInit+0xf8>)
 8000696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000698:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	2023      	movs	r0, #35	; 0x23
 80006a0:	f000 ffc7 	bl	8001632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80006a4:	2023      	movs	r0, #35	; 0x23
 80006a6:	f000 ffe0 	bl	800166a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80006aa:	bf00      	nop
 80006ac:	3728      	adds	r7, #40	; 0x28
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40013000 	.word	0x40013000
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40010800 	.word	0x40010800
 80006c0:	40010c00 	.word	0x40010c00
 80006c4:	40010000 	.word	0x40010000

080006c8 <SpiRxCallback>:
  }
}

/* USER CODE BEGIN 1 */
void SpiRxCallback(SPI_HandleTypeDef *hspi)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]

}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr

080006da <SpiTxCallback>:


void SpiTxCallback(SPI_HandleTypeDef *hspi)
{
 80006da:	b480      	push	{r7}
 80006dc:	b083      	sub	sp, #12
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]

}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr

080006ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <HAL_MspInit+0x40>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	4a0d      	ldr	r2, [pc, #52]	; (800072c <HAL_MspInit+0x40>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6193      	str	r3, [r2, #24]
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <HAL_MspInit+0x40>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <HAL_MspInit+0x40>)
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	4a07      	ldr	r2, [pc, #28]	; (800072c <HAL_MspInit+0x40>)
 8000710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000714:	61d3      	str	r3, [r2, #28]
 8000716:	4b05      	ldr	r3, [pc, #20]	; (800072c <HAL_MspInit+0x40>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr
 800072c:	40021000 	.word	0x40021000

08000730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <NMI_Handler+0x4>

08000736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073a:	e7fe      	b.n	800073a <HardFault_Handler+0x4>

0800073c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <MemManage_Handler+0x4>

08000742 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <BusFault_Handler+0x4>

08000748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800074c:	e7fe      	b.n	800074c <UsageFault_Handler+0x4>

0800074e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr

0800075a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr

08000766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr

08000772 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000776:	f000 f98d 	bl	8000a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000784:	4802      	ldr	r0, [pc, #8]	; (8000790 <ADC1_2_IRQHandler+0x10>)
 8000786:	f000 fbfb 	bl	8000f80 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	2000007c 	.word	0x2000007c

08000794 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000798:	4802      	ldr	r0, [pc, #8]	; (80007a4 <SPI1_IRQHandler+0x10>)
 800079a:	f002 f81b 	bl	80027d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000d0 	.word	0x200000d0

080007a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80007ac:	4802      	ldr	r0, [pc, #8]	; (80007b8 <USART3_IRQHandler+0x10>)
 80007ae:	f002 fae9 	bl	8002d84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200001bc 	.word	0x200001bc

080007bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007c4:	4a14      	ldr	r2, [pc, #80]	; (8000818 <_sbrk+0x5c>)
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <_sbrk+0x60>)
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007d0:	4b13      	ldr	r3, [pc, #76]	; (8000820 <_sbrk+0x64>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d102      	bne.n	80007de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <_sbrk+0x64>)
 80007da:	4a12      	ldr	r2, [pc, #72]	; (8000824 <_sbrk+0x68>)
 80007dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <_sbrk+0x64>)
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4413      	add	r3, r2
 80007e6:	693a      	ldr	r2, [r7, #16]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d207      	bcs.n	80007fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007ec:	f003 f8e8 	bl	80039c0 <__errno>
 80007f0:	4603      	mov	r3, r0
 80007f2:	220c      	movs	r2, #12
 80007f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007f6:	f04f 33ff 	mov.w	r3, #4294967295
 80007fa:	e009      	b.n	8000810 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <_sbrk+0x64>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000802:	4b07      	ldr	r3, [pc, #28]	; (8000820 <_sbrk+0x64>)
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4413      	add	r3, r2
 800080a:	4a05      	ldr	r2, [pc, #20]	; (8000820 <_sbrk+0x64>)
 800080c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800080e:	68fb      	ldr	r3, [r7, #12]
}
 8000810:	4618      	mov	r0, r3
 8000812:	3718      	adds	r7, #24
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20005000 	.word	0x20005000
 800081c:	00000400 	.word	0x00000400
 8000820:	20000150 	.word	0x20000150
 8000824:	20000380 	.word	0x20000380

08000828 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr

08000834 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <MX_USART3_UART_Init+0x5c>)
 800083a:	4a16      	ldr	r2, [pc, #88]	; (8000894 <MX_USART3_UART_Init+0x60>)
 800083c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_USART3_UART_Init+0x5c>)
 8000840:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000844:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <MX_USART3_UART_Init+0x5c>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b10      	ldr	r3, [pc, #64]	; (8000890 <MX_USART3_UART_Init+0x5c>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_USART3_UART_Init+0x5c>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <MX_USART3_UART_Init+0x5c>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_USART3_UART_Init+0x5c>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <MX_USART3_UART_Init+0x5c>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800086a:	4809      	ldr	r0, [pc, #36]	; (8000890 <MX_USART3_UART_Init+0x5c>)
 800086c:	f002 f8ee 	bl	8002a4c <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000876:	f7ff fe6e 	bl	8000556 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  USART3->CR1 |= (USART_CR1_TE | USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_UE | USART_CR1_TCIE);
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_USART3_UART_Init+0x60>)
 800087c:	68db      	ldr	r3, [r3, #12]
 800087e:	4a05      	ldr	r2, [pc, #20]	; (8000894 <MX_USART3_UART_Init+0x60>)
 8000880:	f443 5301 	orr.w	r3, r3, #8256	; 0x2040
 8000884:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8000888:	60d3      	str	r3, [r2, #12]
  /* USER CODE END USART3_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200001bc 	.word	0x200001bc
 8000894:	40004800 	.word	0x40004800

08000898 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a29      	ldr	r2, [pc, #164]	; (8000958 <HAL_UART_MspInit+0xc0>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d14b      	bne.n	8000950 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80008b8:	4b28      	ldr	r3, [pc, #160]	; (800095c <HAL_UART_MspInit+0xc4>)
 80008ba:	69db      	ldr	r3, [r3, #28]
 80008bc:	4a27      	ldr	r2, [pc, #156]	; (800095c <HAL_UART_MspInit+0xc4>)
 80008be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008c2:	61d3      	str	r3, [r2, #28]
 80008c4:	4b25      	ldr	r3, [pc, #148]	; (800095c <HAL_UART_MspInit+0xc4>)
 80008c6:	69db      	ldr	r3, [r3, #28]
 80008c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d0:	4b22      	ldr	r3, [pc, #136]	; (800095c <HAL_UART_MspInit+0xc4>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	4a21      	ldr	r2, [pc, #132]	; (800095c <HAL_UART_MspInit+0xc4>)
 80008d6:	f043 0310 	orr.w	r3, r3, #16
 80008da:	6193      	str	r3, [r2, #24]
 80008dc:	4b1f      	ldr	r3, [pc, #124]	; (800095c <HAL_UART_MspInit+0xc4>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f003 0310 	and.w	r3, r3, #16
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	2302      	movs	r3, #2
 80008f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	4818      	ldr	r0, [pc, #96]	; (8000960 <HAL_UART_MspInit+0xc8>)
 80008fe:	f000 ff81 	bl	8001804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000902:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	4812      	ldr	r0, [pc, #72]	; (8000960 <HAL_UART_MspInit+0xc8>)
 8000918:	f000 ff74 	bl	8001804 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <HAL_UART_MspInit+0xcc>)
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
 8000922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000924:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
 800092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
 8000932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000934:	f043 0310 	orr.w	r3, r3, #16
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
 800093a:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <HAL_UART_MspInit+0xcc>)
 800093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093e:	6053      	str	r3, [r2, #4]

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	2100      	movs	r1, #0
 8000944:	2027      	movs	r0, #39	; 0x27
 8000946:	f000 fe74 	bl	8001632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800094a:	2027      	movs	r0, #39	; 0x27
 800094c:	f000 fe8d 	bl	800166a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000950:	bf00      	nop
 8000952:	3728      	adds	r7, #40	; 0x28
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40004800 	.word	0x40004800
 800095c:	40021000 	.word	0x40021000
 8000960:	40011000 	.word	0x40011000
 8000964:	40010000 	.word	0x40010000

08000968 <UartRxCallback>:
	HAL_UART_Receive_IT(&huart3, &UartRxValue, 1);
}


void UartRxCallback(UART_HandleTypeDef *huart)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	UartRxReceived = true;
 8000970:	4b05      	ldr	r3, [pc, #20]	; (8000988 <UartRxCallback+0x20>)
 8000972:	2201      	movs	r2, #1
 8000974:	701a      	strb	r2, [r3, #0]
    // Toggle led
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000976:	2120      	movs	r1, #32
 8000978:	4804      	ldr	r0, [pc, #16]	; (800098c <UartRxCallback+0x24>)
 800097a:	f001 f8f6 	bl	8001b6a <HAL_GPIO_TogglePin>
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200001b9 	.word	0x200001b9
 800098c:	40010800 	.word	0x40010800

08000990 <UartTxCallback>:



void UartTxCallback(UART_HandleTypeDef *huart)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
    // Enable transfer complete interrupt
    USART3->CR1 |= USART_CR1_TCIE;
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <UartTxCallback+0x28>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	4a06      	ldr	r2, [pc, #24]	; (80009b8 <UartTxCallback+0x28>)
 800099e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a2:	60d3      	str	r3, [r2, #12]
    // Reset transfer complete flag
    USART3->SR &= !USART_SR_TC_Msk;
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <UartTxCallback+0x28>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <UartTxCallback+0x28>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	40004800 	.word	0x40004800

080009bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009bc:	f7ff ff34 	bl	8000828 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c0:	480b      	ldr	r0, [pc, #44]	; (80009f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009c2:	490c      	ldr	r1, [pc, #48]	; (80009f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009c4:	4a0c      	ldr	r2, [pc, #48]	; (80009f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a09      	ldr	r2, [pc, #36]	; (80009fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009d8:	4c09      	ldr	r4, [pc, #36]	; (8000a00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009e6:	f002 fff1 	bl	80039cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ea:	f7ff fcdf 	bl	80003ac <main>
  bx lr
 80009ee:	4770      	bx	lr
  ldr r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80009f8:	08004360 	.word	0x08004360
  ldr r2, =_sbss
 80009fc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a00:	20000380 	.word	0x20000380

08000a04 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <CAN1_RX1_IRQHandler>
	...

08000a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <HAL_Init+0x28>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a07      	ldr	r2, [pc, #28]	; (8000a30 <HAL_Init+0x28>)
 8000a12:	f043 0310 	orr.w	r3, r3, #16
 8000a16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a18:	2003      	movs	r0, #3
 8000a1a:	f000 fdff 	bl	800161c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1e:	200f      	movs	r0, #15
 8000a20:	f000 f808 	bl	8000a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a24:	f7ff fe62 	bl	80006ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40022000 	.word	0x40022000

08000a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_InitTick+0x54>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_InitTick+0x58>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	4619      	mov	r1, r3
 8000a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 fe17 	bl	8001686 <HAL_SYSTICK_Config>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e00e      	b.n	8000a80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b0f      	cmp	r3, #15
 8000a66:	d80a      	bhi.n	8000a7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	f000 fddf 	bl	8001632 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a74:	4a06      	ldr	r2, [pc, #24]	; (8000a90 <HAL_InitTick+0x5c>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	e000      	b.n	8000a80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	20000008 	.word	0x20000008
 8000a90:	20000004 	.word	0x20000004

08000a94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <HAL_IncTick+0x1c>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <HAL_IncTick+0x20>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a03      	ldr	r2, [pc, #12]	; (8000ab4 <HAL_IncTick+0x20>)
 8000aa6:	6013      	str	r3, [r2, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	20000234 	.word	0x20000234

08000ab8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return uwTick;
 8000abc:	4b02      	ldr	r3, [pc, #8]	; (8000ac8 <HAL_GetTick+0x10>)
 8000abe:	681b      	ldr	r3, [r3, #0]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr
 8000ac8:	20000234 	.word	0x20000234

08000acc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad4:	f7ff fff0 	bl	8000ab8 <HAL_GetTick>
 8000ad8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae4:	d005      	beq.n	8000af2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <HAL_Delay+0x44>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	461a      	mov	r2, r3
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	4413      	add	r3, r2
 8000af0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000af2:	bf00      	nop
 8000af4:	f7ff ffe0 	bl	8000ab8 <HAL_GetTick>
 8000af8:	4602      	mov	r2, r0
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d8f7      	bhi.n	8000af4 <HAL_Delay+0x28>
  {
  }
}
 8000b04:	bf00      	nop
 8000b06:	bf00      	nop
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000008 	.word	0x20000008

08000b14 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b20:	2300      	movs	r3, #0
 8000b22:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d101      	bne.n	8000b36 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e0d5      	b.n	8000ce2 <HAL_ADC_Init+0x1ce>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d120      	bne.n	8000b86 <HAL_ADC_Init+0x72>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a65      	ldr	r2, [pc, #404]	; (8000cec <HAL_ADC_Init+0x1d8>)
 8000b56:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a65      	ldr	r2, [pc, #404]	; (8000cf0 <HAL_ADC_Init+0x1dc>)
 8000b5c:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a64      	ldr	r2, [pc, #400]	; (8000cf4 <HAL_ADC_Init+0x1e0>)
 8000b62:	639a      	str	r2, [r3, #56]	; 0x38
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a64      	ldr	r2, [pc, #400]	; (8000cf8 <HAL_ADC_Init+0x1e4>)
 8000b68:	63da      	str	r2, [r3, #60]	; 0x3c
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a63      	ldr	r2, [pc, #396]	; (8000cfc <HAL_ADC_Init+0x1e8>)
 8000b6e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (hadc->MspInitCallback == NULL)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d102      	bne.n	8000b7e <HAL_ADC_Init+0x6a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a61      	ldr	r2, [pc, #388]	; (8000d00 <HAL_ADC_Init+0x1ec>)
 8000b7c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	4798      	blx	r3
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f000 fc32 	bl	80013f0 <ADC_ConversionStop_Disable>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b94:	f003 0310 	and.w	r3, r3, #16
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f040 8099 	bne.w	8000cd0 <HAL_ADC_Init+0x1bc>
 8000b9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	f040 8095 	bne.w	8000cd0 <HAL_ADC_Init+0x1bc>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000baa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bae:	f023 0302 	bic.w	r3, r3, #2
 8000bb2:	f043 0202 	orr.w	r2, r3, #2
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bc2:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	7b1b      	ldrb	r3, [r3, #12]
 8000bc8:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bca:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bcc:	68ba      	ldr	r2, [r7, #8]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bda:	d003      	beq.n	8000be4 <HAL_ADC_Init+0xd0>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d102      	bne.n	8000bea <HAL_ADC_Init+0xd6>
 8000be4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000be8:	e000      	b.n	8000bec <HAL_ADC_Init+0xd8>
 8000bea:	2300      	movs	r3, #0
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	7d1b      	ldrb	r3, [r3, #20]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d119      	bne.n	8000c2e <HAL_ADC_Init+0x11a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	7b1b      	ldrb	r3, [r3, #12]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d109      	bne.n	8000c16 <HAL_ADC_Init+0x102>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	035a      	lsls	r2, r3, #13
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	e00b      	b.n	8000c2e <HAL_ADC_Init+0x11a>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c1a:	f043 0220 	orr.w	r2, r3, #32
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c26:	f043 0201 	orr.w	r2, r3, #1
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	689a      	ldr	r2, [r3, #8]
 8000c48:	4b2e      	ldr	r3, [pc, #184]	; (8000d04 <HAL_ADC_Init+0x1f0>)
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	6812      	ldr	r2, [r2, #0]
 8000c50:	68b9      	ldr	r1, [r7, #8]
 8000c52:	430b      	orrs	r3, r1
 8000c54:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c5e:	d003      	beq.n	8000c68 <HAL_ADC_Init+0x154>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d104      	bne.n	8000c72 <HAL_ADC_Init+0x15e>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	691b      	ldr	r3, [r3, #16]
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	051b      	lsls	r3, r3, #20
 8000c70:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c78:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	68fa      	ldr	r2, [r7, #12]
 8000c82:	430a      	orrs	r2, r1
 8000c84:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	689a      	ldr	r2, [r3, #8]
 8000c8c:	4b1e      	ldr	r3, [pc, #120]	; (8000d08 <HAL_ADC_Init+0x1f4>)
 8000c8e:	4013      	ands	r3, r2
 8000c90:	68ba      	ldr	r2, [r7, #8]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d10b      	bne.n	8000cae <HAL_ADC_Init+0x19a>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca0:	f023 0303 	bic.w	r3, r3, #3
 8000ca4:	f043 0201 	orr.w	r2, r3, #1
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cac:	e018      	b.n	8000ce0 <HAL_ADC_Init+0x1cc>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb2:	f023 0312 	bic.w	r3, r3, #18
 8000cb6:	f043 0210 	orr.w	r2, r3, #16
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc2:	f043 0201 	orr.w	r2, r3, #1
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cce:	e007      	b.n	8000ce0 <HAL_ADC_Init+0x1cc>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd4:	f043 0210 	orr.w	r2, r3, #16
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	08001105 	.word	0x08001105
 8000cf0:	08001117 	.word	0x08001117
 8000cf4:	08001129 	.word	0x08001129
 8000cf8:	0800113b 	.word	0x0800113b
 8000cfc:	08001473 	.word	0x08001473
 8000d00:	080001d9 	.word	0x080001d9
 8000d04:	ffe1f7fd 	.word	0xffe1f7fd
 8000d08:	ff1f0efe 	.word	0xff1f0efe

08000d0c <HAL_ADC_RegisterCallback>:
  *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID MspDeInit callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef CallbackID, pADC_CallbackTypeDef pCallback)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b087      	sub	sp, #28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	460b      	mov	r3, r1
 8000d16:	607a      	str	r2, [r7, #4]
 8000d18:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	75fb      	strb	r3, [r7, #23]
  
  if (pCallback == NULL)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d107      	bne.n	8000d34 <HAL_ADC_RegisterCallback+0x28>
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d28:	f043 0210 	orr.w	r2, r3, #16
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	62da      	str	r2, [r3, #44]	; 0x2c

    return HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	e06a      	b.n	8000e0a <HAL_ADC_RegisterCallback+0xfe>
  }
  
  if ((hadc->State & HAL_ADC_STATE_READY) != 0)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d38:	f003 0301 	and.w	r3, r3, #1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d040      	beq.n	8000dc2 <HAL_ADC_RegisterCallback+0xb6>
  {
    switch (CallbackID)
 8000d40:	7afb      	ldrb	r3, [r7, #11]
 8000d42:	2b0a      	cmp	r3, #10
 8000d44:	d834      	bhi.n	8000db0 <HAL_ADC_RegisterCallback+0xa4>
 8000d46:	a201      	add	r2, pc, #4	; (adr r2, 8000d4c <HAL_ADC_RegisterCallback+0x40>)
 8000d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d4c:	08000d79 	.word	0x08000d79
 8000d50:	08000d81 	.word	0x08000d81
 8000d54:	08000d89 	.word	0x08000d89
 8000d58:	08000d91 	.word	0x08000d91
 8000d5c:	08000d99 	.word	0x08000d99
 8000d60:	08000db1 	.word	0x08000db1
 8000d64:	08000db1 	.word	0x08000db1
 8000d68:	08000db1 	.word	0x08000db1
 8000d6c:	08000db1 	.word	0x08000db1
 8000d70:	08000da1 	.word	0x08000da1
 8000d74:	08000da9 	.word	0x08000da9
    {
      case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
        hadc->ConvCpltCallback = pCallback;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 8000d7e:	e043      	b.n	8000e08 <HAL_ADC_RegisterCallback+0xfc>
      
      case HAL_ADC_CONVERSION_HALF_CB_ID :
        hadc->ConvHalfCpltCallback = pCallback;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 8000d86:	e03f      	b.n	8000e08 <HAL_ADC_RegisterCallback+0xfc>
      
      case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
        hadc->LevelOutOfWindowCallback = pCallback;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 8000d8e:	e03b      	b.n	8000e08 <HAL_ADC_RegisterCallback+0xfc>
      
      case HAL_ADC_ERROR_CB_ID :
        hadc->ErrorCallback = pCallback;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	63da      	str	r2, [r3, #60]	; 0x3c
        break;
 8000d96:	e037      	b.n	8000e08 <HAL_ADC_RegisterCallback+0xfc>
      
      case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
        hadc->InjectedConvCpltCallback = pCallback;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	641a      	str	r2, [r3, #64]	; 0x40
        break;
 8000d9e:	e033      	b.n	8000e08 <HAL_ADC_RegisterCallback+0xfc>
      
      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8000da6:	e02f      	b.n	8000e08 <HAL_ADC_RegisterCallback+0xfc>
      
      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8000dae:	e02b      	b.n	8000e08 <HAL_ADC_RegisterCallback+0xfc>
      
      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db4:	f043 0210 	orr.w	r2, r3, #16
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Return error status */
        status = HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	75fb      	strb	r3, [r7, #23]
        break;
 8000dc0:	e022      	b.n	8000e08 <HAL_ADC_RegisterCallback+0xfc>
    }
  }
  else if (HAL_ADC_STATE_RESET == hadc->State)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d116      	bne.n	8000df8 <HAL_ADC_RegisterCallback+0xec>
  {
    switch (CallbackID)
 8000dca:	7afb      	ldrb	r3, [r7, #11]
 8000dcc:	2b09      	cmp	r3, #9
 8000dce:	d002      	beq.n	8000dd6 <HAL_ADC_RegisterCallback+0xca>
 8000dd0:	2b0a      	cmp	r3, #10
 8000dd2:	d004      	beq.n	8000dde <HAL_ADC_RegisterCallback+0xd2>
 8000dd4:	e007      	b.n	8000de6 <HAL_ADC_RegisterCallback+0xda>
    {
      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8000ddc:	e014      	b.n	8000e08 <HAL_ADC_RegisterCallback+0xfc>
      
      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8000de4:	e010      	b.n	8000e08 <HAL_ADC_RegisterCallback+0xfc>
      
      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dea:	f043 0210 	orr.w	r2, r3, #16
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	62da      	str	r2, [r3, #44]	; 0x2c
      
        /* Return error status */
        status = HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	75fb      	strb	r3, [r7, #23]
        break;
 8000df6:	e007      	b.n	8000e08 <HAL_ADC_RegisterCallback+0xfc>
    }
  }
  else
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfc:	f043 0210 	orr.w	r2, r3, #16
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Return error status */
    status =  HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	371c      	adds	r7, #28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr

08000e14 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d101      	bne.n	8000e2e <HAL_ADC_Start_IT+0x1a>
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	e0a0      	b.n	8000f70 <HAL_ADC_Start_IT+0x15c>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2201      	movs	r2, #1
 8000e32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f000 fa80 	bl	800133c <ADC_Enable>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f040 808f 	bne.w	8000f66 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e50:	f023 0301 	bic.w	r3, r3, #1
 8000e54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a45      	ldr	r2, [pc, #276]	; (8000f78 <HAL_ADC_Start_IT+0x164>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d105      	bne.n	8000e72 <HAL_ADC_Start_IT+0x5e>
 8000e66:	4b45      	ldr	r3, [pc, #276]	; (8000f7c <HAL_ADC_Start_IT+0x168>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d115      	bne.n	8000e9e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d026      	beq.n	8000eda <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e9c:	e01d      	b.n	8000eda <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a33      	ldr	r2, [pc, #204]	; (8000f7c <HAL_ADC_Start_IT+0x168>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d004      	beq.n	8000ebe <HAL_ADC_Start_IT+0xaa>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a2f      	ldr	r2, [pc, #188]	; (8000f78 <HAL_ADC_Start_IT+0x164>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d10d      	bne.n	8000eda <HAL_ADC_Start_IT+0xc6>
 8000ebe:	4b2f      	ldr	r3, [pc, #188]	; (8000f7c <HAL_ADC_Start_IT+0x168>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d007      	beq.n	8000eda <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ece:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ed2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ede:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d006      	beq.n	8000ef4 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eea:	f023 0206 	bic.w	r2, r3, #6
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ef2:	e002      	b.n	8000efa <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f06f 0202 	mvn.w	r2, #2
 8000f0a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f042 0220 	orr.w	r2, r2, #32
 8000f1a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f26:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f2a:	d113      	bne.n	8000f54 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f30:	4a11      	ldr	r2, [pc, #68]	; (8000f78 <HAL_ADC_Start_IT+0x164>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d105      	bne.n	8000f42 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <HAL_ADC_Start_IT+0x168>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d108      	bne.n	8000f54 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	e00c      	b.n	8000f6e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	e003      	b.n	8000f6e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40012800 	.word	0x40012800
 8000f7c:	40012400 	.word	0x40012400

08000f80 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	f003 0320 	and.w	r3, r3, #32
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d03f      	beq.n	8001022 <HAL_ADC_IRQHandler+0xa2>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d03a      	beq.n	8001022 <HAL_ADC_IRQHandler+0xa2>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb0:	f003 0310 	and.w	r3, r3, #16
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d105      	bne.n	8000fc4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fbc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000fce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000fd2:	d11d      	bne.n	8001010 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d119      	bne.n	8001010 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0220 	bic.w	r2, r2, #32
 8000fea:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d105      	bne.n	8001010 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001008:	f043 0201 	orr.w	r2, r3, #1
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	629a      	str	r2, [r3, #40]	; 0x28
        }
      }

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	4798      	blx	r3
#else
      HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f06f 0212 	mvn.w	r2, #18
 8001020:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001028:	2b00      	cmp	r3, #0
 800102a:	d04e      	beq.n	80010ca <HAL_ADC_IRQHandler+0x14a>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	2b00      	cmp	r3, #0
 8001034:	d049      	beq.n	80010ca <HAL_ADC_IRQHandler+0x14a>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103a:	f003 0310 	and.w	r3, r3, #16
 800103e:	2b00      	cmp	r3, #0
 8001040:	d105      	bne.n	800104e <HAL_ADC_IRQHandler+0xce>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001046:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001058:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800105c:	d012      	beq.n	8001084 <HAL_ADC_IRQHandler+0x104>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001068:	2b00      	cmp	r3, #0
 800106a:	d125      	bne.n	80010b8 <HAL_ADC_IRQHandler+0x138>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001076:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800107a:	d11d      	bne.n	80010b8 <HAL_ADC_IRQHandler+0x138>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001080:	2b00      	cmp	r3, #0
 8001082:	d119      	bne.n	80010b8 <HAL_ADC_IRQHandler+0x138>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001092:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001098:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d105      	bne.n	80010b8 <HAL_ADC_IRQHandler+0x138>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b0:	f043 0201 	orr.w	r2, r3, #1
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28
        }
      }

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f06f 020c 	mvn.w	r2, #12
 80010c8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d013      	beq.n	80010fc <HAL_ADC_IRQHandler+0x17c>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d00e      	beq.n	80010fc <HAL_ADC_IRQHandler+0x17c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f06f 0201 	mvn.w	r2, #1
 80010fa:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr

08001116 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr

0800113a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001156:	2300      	movs	r3, #0
 8001158:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001164:	2b01      	cmp	r3, #1
 8001166:	d101      	bne.n	800116c <HAL_ADC_ConfigChannel+0x20>
 8001168:	2302      	movs	r3, #2
 800116a:	e0dc      	b.n	8001326 <HAL_ADC_ConfigChannel+0x1da>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2201      	movs	r2, #1
 8001170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b06      	cmp	r3, #6
 800117a:	d81c      	bhi.n	80011b6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685a      	ldr	r2, [r3, #4]
 8001186:	4613      	mov	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	3b05      	subs	r3, #5
 800118e:	221f      	movs	r2, #31
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	4019      	ands	r1, r3
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	4613      	mov	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	3b05      	subs	r3, #5
 80011a8:	fa00 f203 	lsl.w	r2, r0, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	635a      	str	r2, [r3, #52]	; 0x34
 80011b4:	e03c      	b.n	8001230 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b0c      	cmp	r3, #12
 80011bc:	d81c      	bhi.n	80011f8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	4613      	mov	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	3b23      	subs	r3, #35	; 0x23
 80011d0:	221f      	movs	r2, #31
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	4019      	ands	r1, r3
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	6818      	ldr	r0, [r3, #0]
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	4613      	mov	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	3b23      	subs	r3, #35	; 0x23
 80011ea:	fa00 f203 	lsl.w	r2, r0, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	430a      	orrs	r2, r1
 80011f4:	631a      	str	r2, [r3, #48]	; 0x30
 80011f6:	e01b      	b.n	8001230 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	3b41      	subs	r3, #65	; 0x41
 800120a:	221f      	movs	r2, #31
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	4019      	ands	r1, r3
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	4613      	mov	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	3b41      	subs	r3, #65	; 0x41
 8001224:	fa00 f203 	lsl.w	r2, r0, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	430a      	orrs	r2, r1
 800122e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b09      	cmp	r3, #9
 8001236:	d91c      	bls.n	8001272 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	68d9      	ldr	r1, [r3, #12]
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	4613      	mov	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	4413      	add	r3, r2
 8001248:	3b1e      	subs	r3, #30
 800124a:	2207      	movs	r2, #7
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	4019      	ands	r1, r3
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	6898      	ldr	r0, [r3, #8]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4613      	mov	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	3b1e      	subs	r3, #30
 8001264:	fa00 f203 	lsl.w	r2, r0, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	430a      	orrs	r2, r1
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	e019      	b.n	80012a6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6919      	ldr	r1, [r3, #16]
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4613      	mov	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4413      	add	r3, r2
 8001282:	2207      	movs	r2, #7
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	4019      	ands	r1, r3
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	6898      	ldr	r0, [r3, #8]
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4613      	mov	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	fa00 f203 	lsl.w	r2, r0, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	430a      	orrs	r2, r1
 80012a4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b10      	cmp	r3, #16
 80012ac:	d003      	beq.n	80012b6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012b2:	2b11      	cmp	r3, #17
 80012b4:	d132      	bne.n	800131c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a1d      	ldr	r2, [pc, #116]	; (8001330 <HAL_ADC_ConfigChannel+0x1e4>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d125      	bne.n	800130c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d126      	bne.n	800131c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80012dc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b10      	cmp	r3, #16
 80012e4:	d11a      	bne.n	800131c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012e6:	4b13      	ldr	r3, [pc, #76]	; (8001334 <HAL_ADC_ConfigChannel+0x1e8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a13      	ldr	r2, [pc, #76]	; (8001338 <HAL_ADC_ConfigChannel+0x1ec>)
 80012ec:	fba2 2303 	umull	r2, r3, r2, r3
 80012f0:	0c9a      	lsrs	r2, r3, #18
 80012f2:	4613      	mov	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012fc:	e002      	b.n	8001304 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	3b01      	subs	r3, #1
 8001302:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f9      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x1b2>
 800130a:	e007      	b.n	800131c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001310:	f043 0220 	orr.w	r2, r3, #32
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	40012400 	.word	0x40012400
 8001334:	20000000 	.word	0x20000000
 8001338:	431bde83 	.word	0x431bde83

0800133c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b01      	cmp	r3, #1
 8001358:	d040      	beq.n	80013dc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f042 0201 	orr.w	r2, r2, #1
 8001368:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800136a:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <ADC_Enable+0xac>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a1f      	ldr	r2, [pc, #124]	; (80013ec <ADC_Enable+0xb0>)
 8001370:	fba2 2303 	umull	r2, r3, r2, r3
 8001374:	0c9b      	lsrs	r3, r3, #18
 8001376:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001378:	e002      	b.n	8001380 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	3b01      	subs	r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f9      	bne.n	800137a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001386:	f7ff fb97 	bl	8000ab8 <HAL_GetTick>
 800138a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800138c:	e01f      	b.n	80013ce <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800138e:	f7ff fb93 	bl	8000ab8 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d918      	bls.n	80013ce <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d011      	beq.n	80013ce <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ae:	f043 0210 	orr.w	r2, r3, #16
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ba:	f043 0201 	orr.w	r2, r3, #1
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e007      	b.n	80013de <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d1d8      	bne.n	800138e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000000 	.word	0x20000000
 80013ec:	431bde83 	.word	0x431bde83

080013f0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b01      	cmp	r3, #1
 8001408:	d12e      	bne.n	8001468 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f022 0201 	bic.w	r2, r2, #1
 8001418:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800141a:	f7ff fb4d 	bl	8000ab8 <HAL_GetTick>
 800141e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001420:	e01b      	b.n	800145a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001422:	f7ff fb49 	bl	8000ab8 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d914      	bls.n	800145a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b01      	cmp	r3, #1
 800143c:	d10d      	bne.n	800145a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001442:	f043 0210 	orr.w	r2, r3, #16
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144e:	f043 0201 	orr.w	r2, r3, #1
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e007      	b.n	800146a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b01      	cmp	r3, #1
 8001466:	d0dc      	beq.n	8001422 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a0:	4013      	ands	r3, r2
 80014a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b6:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	60d3      	str	r3, [r2, #12]
}
 80014bc:	bf00      	nop
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d0:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <__NVIC_GetPriorityGrouping+0x18>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	0a1b      	lsrs	r3, r3, #8
 80014d6:	f003 0307 	and.w	r3, r3, #7
}
 80014da:	4618      	mov	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	db0b      	blt.n	8001512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	f003 021f 	and.w	r2, r3, #31
 8001500:	4906      	ldr	r1, [pc, #24]	; (800151c <__NVIC_EnableIRQ+0x34>)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	095b      	lsrs	r3, r3, #5
 8001508:	2001      	movs	r0, #1
 800150a:	fa00 f202 	lsl.w	r2, r0, r2
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	e000e100 	.word	0xe000e100

08001520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	2b00      	cmp	r3, #0
 8001532:	db0a      	blt.n	800154a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	b2da      	uxtb	r2, r3
 8001538:	490c      	ldr	r1, [pc, #48]	; (800156c <__NVIC_SetPriority+0x4c>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	0112      	lsls	r2, r2, #4
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	440b      	add	r3, r1
 8001544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001548:	e00a      	b.n	8001560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4908      	ldr	r1, [pc, #32]	; (8001570 <__NVIC_SetPriority+0x50>)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	3b04      	subs	r3, #4
 8001558:	0112      	lsls	r2, r2, #4
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	440b      	add	r3, r1
 800155e:	761a      	strb	r2, [r3, #24]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000e100 	.word	0xe000e100
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	; 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f1c3 0307 	rsb	r3, r3, #7
 800158e:	2b04      	cmp	r3, #4
 8001590:	bf28      	it	cs
 8001592:	2304      	movcs	r3, #4
 8001594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3304      	adds	r3, #4
 800159a:	2b06      	cmp	r3, #6
 800159c:	d902      	bls.n	80015a4 <NVIC_EncodePriority+0x30>
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3b03      	subs	r3, #3
 80015a2:	e000      	b.n	80015a6 <NVIC_EncodePriority+0x32>
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43da      	mvns	r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	401a      	ands	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	43d9      	mvns	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	4313      	orrs	r3, r2
         );
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3724      	adds	r7, #36	; 0x24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e8:	d301      	bcc.n	80015ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ea:	2301      	movs	r3, #1
 80015ec:	e00f      	b.n	800160e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ee:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <SysTick_Config+0x40>)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f6:	210f      	movs	r1, #15
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295
 80015fc:	f7ff ff90 	bl	8001520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <SysTick_Config+0x40>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001606:	4b04      	ldr	r3, [pc, #16]	; (8001618 <SysTick_Config+0x40>)
 8001608:	2207      	movs	r2, #7
 800160a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	e000e010 	.word	0xe000e010

0800161c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ff2d 	bl	8001484 <__NVIC_SetPriorityGrouping>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001632:	b580      	push	{r7, lr}
 8001634:	b086      	sub	sp, #24
 8001636:	af00      	add	r7, sp, #0
 8001638:	4603      	mov	r3, r0
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
 800163e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001644:	f7ff ff42 	bl	80014cc <__NVIC_GetPriorityGrouping>
 8001648:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	68b9      	ldr	r1, [r7, #8]
 800164e:	6978      	ldr	r0, [r7, #20]
 8001650:	f7ff ff90 	bl	8001574 <NVIC_EncodePriority>
 8001654:	4602      	mov	r2, r0
 8001656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165a:	4611      	mov	r1, r2
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff5f 	bl	8001520 <__NVIC_SetPriority>
}
 8001662:	bf00      	nop
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	4603      	mov	r3, r0
 8001672:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff35 	bl	80014e8 <__NVIC_EnableIRQ>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff ffa2 	bl	80015d8 <SysTick_Config>
 8001694:	4603      	mov	r3, r0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800169e:	b480      	push	{r7}
 80016a0:	b085      	sub	sp, #20
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d008      	beq.n	80016c8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2204      	movs	r2, #4
 80016ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e020      	b.n	800170a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 020e 	bic.w	r2, r2, #14
 80016d6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 0201 	bic.w	r2, r2, #1
 80016e6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f0:	2101      	movs	r1, #1
 80016f2:	fa01 f202 	lsl.w	r2, r1, r2
 80016f6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001708:	7bfb      	ldrb	r3, [r7, #15]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800171c:	2300      	movs	r3, #0
 800171e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d005      	beq.n	8001738 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2204      	movs	r2, #4
 8001730:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	73fb      	strb	r3, [r7, #15]
 8001736:	e051      	b.n	80017dc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 020e 	bic.w	r2, r2, #14
 8001746:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0201 	bic.w	r2, r2, #1
 8001756:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a22      	ldr	r2, [pc, #136]	; (80017e8 <HAL_DMA_Abort_IT+0xd4>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d029      	beq.n	80017b6 <HAL_DMA_Abort_IT+0xa2>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a21      	ldr	r2, [pc, #132]	; (80017ec <HAL_DMA_Abort_IT+0xd8>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d022      	beq.n	80017b2 <HAL_DMA_Abort_IT+0x9e>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a1f      	ldr	r2, [pc, #124]	; (80017f0 <HAL_DMA_Abort_IT+0xdc>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d01a      	beq.n	80017ac <HAL_DMA_Abort_IT+0x98>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a1e      	ldr	r2, [pc, #120]	; (80017f4 <HAL_DMA_Abort_IT+0xe0>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d012      	beq.n	80017a6 <HAL_DMA_Abort_IT+0x92>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a1c      	ldr	r2, [pc, #112]	; (80017f8 <HAL_DMA_Abort_IT+0xe4>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d00a      	beq.n	80017a0 <HAL_DMA_Abort_IT+0x8c>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a1b      	ldr	r2, [pc, #108]	; (80017fc <HAL_DMA_Abort_IT+0xe8>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d102      	bne.n	800179a <HAL_DMA_Abort_IT+0x86>
 8001794:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001798:	e00e      	b.n	80017b8 <HAL_DMA_Abort_IT+0xa4>
 800179a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800179e:	e00b      	b.n	80017b8 <HAL_DMA_Abort_IT+0xa4>
 80017a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017a4:	e008      	b.n	80017b8 <HAL_DMA_Abort_IT+0xa4>
 80017a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017aa:	e005      	b.n	80017b8 <HAL_DMA_Abort_IT+0xa4>
 80017ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b0:	e002      	b.n	80017b8 <HAL_DMA_Abort_IT+0xa4>
 80017b2:	2310      	movs	r3, #16
 80017b4:	e000      	b.n	80017b8 <HAL_DMA_Abort_IT+0xa4>
 80017b6:	2301      	movs	r3, #1
 80017b8:	4a11      	ldr	r2, [pc, #68]	; (8001800 <HAL_DMA_Abort_IT+0xec>)
 80017ba:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	4798      	blx	r3
    } 
  }
  return status;
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40020008 	.word	0x40020008
 80017ec:	4002001c 	.word	0x4002001c
 80017f0:	40020030 	.word	0x40020030
 80017f4:	40020044 	.word	0x40020044
 80017f8:	40020058 	.word	0x40020058
 80017fc:	4002006c 	.word	0x4002006c
 8001800:	40020000 	.word	0x40020000

08001804 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001804:	b480      	push	{r7}
 8001806:	b08b      	sub	sp, #44	; 0x2c
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800180e:	2300      	movs	r3, #0
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001812:	2300      	movs	r3, #0
 8001814:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001816:	e169      	b.n	8001aec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001818:	2201      	movs	r2, #1
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	69fa      	ldr	r2, [r7, #28]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	429a      	cmp	r2, r3
 8001832:	f040 8158 	bne.w	8001ae6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4a9a      	ldr	r2, [pc, #616]	; (8001aa4 <HAL_GPIO_Init+0x2a0>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d05e      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
 8001840:	4a98      	ldr	r2, [pc, #608]	; (8001aa4 <HAL_GPIO_Init+0x2a0>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d875      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 8001846:	4a98      	ldr	r2, [pc, #608]	; (8001aa8 <HAL_GPIO_Init+0x2a4>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d058      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
 800184c:	4a96      	ldr	r2, [pc, #600]	; (8001aa8 <HAL_GPIO_Init+0x2a4>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d86f      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 8001852:	4a96      	ldr	r2, [pc, #600]	; (8001aac <HAL_GPIO_Init+0x2a8>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d052      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
 8001858:	4a94      	ldr	r2, [pc, #592]	; (8001aac <HAL_GPIO_Init+0x2a8>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d869      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 800185e:	4a94      	ldr	r2, [pc, #592]	; (8001ab0 <HAL_GPIO_Init+0x2ac>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d04c      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
 8001864:	4a92      	ldr	r2, [pc, #584]	; (8001ab0 <HAL_GPIO_Init+0x2ac>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d863      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 800186a:	4a92      	ldr	r2, [pc, #584]	; (8001ab4 <HAL_GPIO_Init+0x2b0>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d046      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
 8001870:	4a90      	ldr	r2, [pc, #576]	; (8001ab4 <HAL_GPIO_Init+0x2b0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d85d      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 8001876:	2b12      	cmp	r3, #18
 8001878:	d82a      	bhi.n	80018d0 <HAL_GPIO_Init+0xcc>
 800187a:	2b12      	cmp	r3, #18
 800187c:	d859      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 800187e:	a201      	add	r2, pc, #4	; (adr r2, 8001884 <HAL_GPIO_Init+0x80>)
 8001880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001884:	080018ff 	.word	0x080018ff
 8001888:	080018d9 	.word	0x080018d9
 800188c:	080018eb 	.word	0x080018eb
 8001890:	0800192d 	.word	0x0800192d
 8001894:	08001933 	.word	0x08001933
 8001898:	08001933 	.word	0x08001933
 800189c:	08001933 	.word	0x08001933
 80018a0:	08001933 	.word	0x08001933
 80018a4:	08001933 	.word	0x08001933
 80018a8:	08001933 	.word	0x08001933
 80018ac:	08001933 	.word	0x08001933
 80018b0:	08001933 	.word	0x08001933
 80018b4:	08001933 	.word	0x08001933
 80018b8:	08001933 	.word	0x08001933
 80018bc:	08001933 	.word	0x08001933
 80018c0:	08001933 	.word	0x08001933
 80018c4:	08001933 	.word	0x08001933
 80018c8:	080018e1 	.word	0x080018e1
 80018cc:	080018f5 	.word	0x080018f5
 80018d0:	4a79      	ldr	r2, [pc, #484]	; (8001ab8 <HAL_GPIO_Init+0x2b4>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d013      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018d6:	e02c      	b.n	8001932 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	623b      	str	r3, [r7, #32]
          break;
 80018de:	e029      	b.n	8001934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	3304      	adds	r3, #4
 80018e6:	623b      	str	r3, [r7, #32]
          break;
 80018e8:	e024      	b.n	8001934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	3308      	adds	r3, #8
 80018f0:	623b      	str	r3, [r7, #32]
          break;
 80018f2:	e01f      	b.n	8001934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	330c      	adds	r3, #12
 80018fa:	623b      	str	r3, [r7, #32]
          break;
 80018fc:	e01a      	b.n	8001934 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d102      	bne.n	800190c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001906:	2304      	movs	r3, #4
 8001908:	623b      	str	r3, [r7, #32]
          break;
 800190a:	e013      	b.n	8001934 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d105      	bne.n	8001920 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001914:	2308      	movs	r3, #8
 8001916:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69fa      	ldr	r2, [r7, #28]
 800191c:	611a      	str	r2, [r3, #16]
          break;
 800191e:	e009      	b.n	8001934 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001920:	2308      	movs	r3, #8
 8001922:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69fa      	ldr	r2, [r7, #28]
 8001928:	615a      	str	r2, [r3, #20]
          break;
 800192a:	e003      	b.n	8001934 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800192c:	2300      	movs	r3, #0
 800192e:	623b      	str	r3, [r7, #32]
          break;
 8001930:	e000      	b.n	8001934 <HAL_GPIO_Init+0x130>
          break;
 8001932:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	2bff      	cmp	r3, #255	; 0xff
 8001938:	d801      	bhi.n	800193e <HAL_GPIO_Init+0x13a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	e001      	b.n	8001942 <HAL_GPIO_Init+0x13e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3304      	adds	r3, #4
 8001942:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2bff      	cmp	r3, #255	; 0xff
 8001948:	d802      	bhi.n	8001950 <HAL_GPIO_Init+0x14c>
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	e002      	b.n	8001956 <HAL_GPIO_Init+0x152>
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	3b08      	subs	r3, #8
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	210f      	movs	r1, #15
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	fa01 f303 	lsl.w	r3, r1, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	401a      	ands	r2, r3
 8001968:	6a39      	ldr	r1, [r7, #32]
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	fa01 f303 	lsl.w	r3, r1, r3
 8001970:	431a      	orrs	r2, r3
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 80b1 	beq.w	8001ae6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001984:	4b4d      	ldr	r3, [pc, #308]	; (8001abc <HAL_GPIO_Init+0x2b8>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	4a4c      	ldr	r2, [pc, #304]	; (8001abc <HAL_GPIO_Init+0x2b8>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	6193      	str	r3, [r2, #24]
 8001990:	4b4a      	ldr	r3, [pc, #296]	; (8001abc <HAL_GPIO_Init+0x2b8>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800199c:	4a48      	ldr	r2, [pc, #288]	; (8001ac0 <HAL_GPIO_Init+0x2bc>)
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	089b      	lsrs	r3, r3, #2
 80019a2:	3302      	adds	r3, #2
 80019a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	220f      	movs	r2, #15
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	4013      	ands	r3, r2
 80019be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a40      	ldr	r2, [pc, #256]	; (8001ac4 <HAL_GPIO_Init+0x2c0>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d013      	beq.n	80019f0 <HAL_GPIO_Init+0x1ec>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a3f      	ldr	r2, [pc, #252]	; (8001ac8 <HAL_GPIO_Init+0x2c4>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d00d      	beq.n	80019ec <HAL_GPIO_Init+0x1e8>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a3e      	ldr	r2, [pc, #248]	; (8001acc <HAL_GPIO_Init+0x2c8>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d007      	beq.n	80019e8 <HAL_GPIO_Init+0x1e4>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a3d      	ldr	r2, [pc, #244]	; (8001ad0 <HAL_GPIO_Init+0x2cc>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d101      	bne.n	80019e4 <HAL_GPIO_Init+0x1e0>
 80019e0:	2303      	movs	r3, #3
 80019e2:	e006      	b.n	80019f2 <HAL_GPIO_Init+0x1ee>
 80019e4:	2304      	movs	r3, #4
 80019e6:	e004      	b.n	80019f2 <HAL_GPIO_Init+0x1ee>
 80019e8:	2302      	movs	r3, #2
 80019ea:	e002      	b.n	80019f2 <HAL_GPIO_Init+0x1ee>
 80019ec:	2301      	movs	r3, #1
 80019ee:	e000      	b.n	80019f2 <HAL_GPIO_Init+0x1ee>
 80019f0:	2300      	movs	r3, #0
 80019f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f4:	f002 0203 	and.w	r2, r2, #3
 80019f8:	0092      	lsls	r2, r2, #2
 80019fa:	4093      	lsls	r3, r2
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a02:	492f      	ldr	r1, [pc, #188]	; (8001ac0 <HAL_GPIO_Init+0x2bc>)
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	089b      	lsrs	r3, r3, #2
 8001a08:	3302      	adds	r3, #2
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d006      	beq.n	8001a2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a1c:	4b2d      	ldr	r3, [pc, #180]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	492c      	ldr	r1, [pc, #176]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	608b      	str	r3, [r1, #8]
 8001a28:	e006      	b.n	8001a38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a2a:	4b2a      	ldr	r3, [pc, #168]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	4928      	ldr	r1, [pc, #160]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d006      	beq.n	8001a52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a44:	4b23      	ldr	r3, [pc, #140]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	4922      	ldr	r1, [pc, #136]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	60cb      	str	r3, [r1, #12]
 8001a50:	e006      	b.n	8001a60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a52:	4b20      	ldr	r3, [pc, #128]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	491e      	ldr	r1, [pc, #120]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d006      	beq.n	8001a7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a6c:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	4918      	ldr	r1, [pc, #96]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]
 8001a78:	e006      	b.n	8001a88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a7a:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	4914      	ldr	r1, [pc, #80]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a84:	4013      	ands	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d021      	beq.n	8001ad8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	490e      	ldr	r1, [pc, #56]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	600b      	str	r3, [r1, #0]
 8001aa0:	e021      	b.n	8001ae6 <HAL_GPIO_Init+0x2e2>
 8001aa2:	bf00      	nop
 8001aa4:	10320000 	.word	0x10320000
 8001aa8:	10310000 	.word	0x10310000
 8001aac:	10220000 	.word	0x10220000
 8001ab0:	10210000 	.word	0x10210000
 8001ab4:	10120000 	.word	0x10120000
 8001ab8:	10110000 	.word	0x10110000
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40010000 	.word	0x40010000
 8001ac4:	40010800 	.word	0x40010800
 8001ac8:	40010c00 	.word	0x40010c00
 8001acc:	40011000 	.word	0x40011000
 8001ad0:	40011400 	.word	0x40011400
 8001ad4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_GPIO_Init+0x304>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	4909      	ldr	r1, [pc, #36]	; (8001b08 <HAL_GPIO_Init+0x304>)
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	3301      	adds	r3, #1
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	fa22 f303 	lsr.w	r3, r2, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f47f ae8e 	bne.w	8001818 <HAL_GPIO_Init+0x14>
  }
}
 8001afc:	bf00      	nop
 8001afe:	bf00      	nop
 8001b00:	372c      	adds	r7, #44	; 0x2c
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr
 8001b08:	40010400 	.word	0x40010400

08001b0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	887b      	ldrh	r3, [r7, #2]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d002      	beq.n	8001b2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b24:	2301      	movs	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
 8001b28:	e001      	b.n	8001b2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr

08001b3a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	460b      	mov	r3, r1
 8001b44:	807b      	strh	r3, [r7, #2]
 8001b46:	4613      	mov	r3, r2
 8001b48:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b4a:	787b      	ldrb	r3, [r7, #1]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b50:	887a      	ldrh	r2, [r7, #2]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b56:	e003      	b.n	8001b60 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b58:	887b      	ldrh	r3, [r7, #2]
 8001b5a:	041a      	lsls	r2, r3, #16
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	611a      	str	r2, [r3, #16]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b085      	sub	sp, #20
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	460b      	mov	r3, r1
 8001b74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b7c:	887a      	ldrh	r2, [r7, #2]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4013      	ands	r3, r2
 8001b82:	041a      	lsls	r2, r3, #16
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	43d9      	mvns	r1, r3
 8001b88:	887b      	ldrh	r3, [r7, #2]
 8001b8a:	400b      	ands	r3, r1
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	611a      	str	r2, [r3, #16]
}
 8001b92:	bf00      	nop
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e272      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 8087 	beq.w	8001cca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bbc:	4b92      	ldr	r3, [pc, #584]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 030c 	and.w	r3, r3, #12
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d00c      	beq.n	8001be2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bc8:	4b8f      	ldr	r3, [pc, #572]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 030c 	and.w	r3, r3, #12
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d112      	bne.n	8001bfa <HAL_RCC_OscConfig+0x5e>
 8001bd4:	4b8c      	ldr	r3, [pc, #560]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be0:	d10b      	bne.n	8001bfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be2:	4b89      	ldr	r3, [pc, #548]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d06c      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x12c>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d168      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e24c      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c02:	d106      	bne.n	8001c12 <HAL_RCC_OscConfig+0x76>
 8001c04:	4b80      	ldr	r3, [pc, #512]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a7f      	ldr	r2, [pc, #508]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	e02e      	b.n	8001c70 <HAL_RCC_OscConfig+0xd4>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10c      	bne.n	8001c34 <HAL_RCC_OscConfig+0x98>
 8001c1a:	4b7b      	ldr	r3, [pc, #492]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a7a      	ldr	r2, [pc, #488]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	4b78      	ldr	r3, [pc, #480]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a77      	ldr	r2, [pc, #476]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e01d      	b.n	8001c70 <HAL_RCC_OscConfig+0xd4>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c3c:	d10c      	bne.n	8001c58 <HAL_RCC_OscConfig+0xbc>
 8001c3e:	4b72      	ldr	r3, [pc, #456]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a71      	ldr	r2, [pc, #452]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	4b6f      	ldr	r3, [pc, #444]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a6e      	ldr	r2, [pc, #440]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e00b      	b.n	8001c70 <HAL_RCC_OscConfig+0xd4>
 8001c58:	4b6b      	ldr	r3, [pc, #428]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a6a      	ldr	r2, [pc, #424]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	4b68      	ldr	r3, [pc, #416]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a67      	ldr	r2, [pc, #412]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d013      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7fe ff1e 	bl	8000ab8 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c80:	f7fe ff1a 	bl	8000ab8 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	; 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e200      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	4b5d      	ldr	r3, [pc, #372]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0xe4>
 8001c9e:	e014      	b.n	8001cca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7fe ff0a 	bl	8000ab8 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7fe ff06 	bl	8000ab8 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	; 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e1ec      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cba:	4b53      	ldr	r3, [pc, #332]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x10c>
 8001cc6:	e000      	b.n	8001cca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d063      	beq.n	8001d9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cd6:	4b4c      	ldr	r3, [pc, #304]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00b      	beq.n	8001cfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ce2:	4b49      	ldr	r3, [pc, #292]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d11c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x18c>
 8001cee:	4b46      	ldr	r3, [pc, #280]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d116      	bne.n	8001d28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfa:	4b43      	ldr	r3, [pc, #268]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d005      	beq.n	8001d12 <HAL_RCC_OscConfig+0x176>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d001      	beq.n	8001d12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e1c0      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d12:	4b3d      	ldr	r3, [pc, #244]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4939      	ldr	r1, [pc, #228]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d26:	e03a      	b.n	8001d9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d020      	beq.n	8001d72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d30:	4b36      	ldr	r3, [pc, #216]	; (8001e0c <HAL_RCC_OscConfig+0x270>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d36:	f7fe febf 	bl	8000ab8 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3e:	f7fe febb 	bl	8000ab8 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e1a1      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d50:	4b2d      	ldr	r3, [pc, #180]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5c:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4927      	ldr	r1, [pc, #156]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	600b      	str	r3, [r1, #0]
 8001d70:	e015      	b.n	8001d9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d72:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <HAL_RCC_OscConfig+0x270>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7fe fe9e 	bl	8000ab8 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d80:	f7fe fe9a 	bl	8000ab8 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e180      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d92:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d03a      	beq.n	8001e20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d019      	beq.n	8001de6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db2:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <HAL_RCC_OscConfig+0x274>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db8:	f7fe fe7e 	bl	8000ab8 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc0:	f7fe fe7a 	bl	8000ab8 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e160      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dde:	2001      	movs	r0, #1
 8001de0:	f000 face 	bl	8002380 <RCC_Delay>
 8001de4:	e01c      	b.n	8001e20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de6:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <HAL_RCC_OscConfig+0x274>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dec:	f7fe fe64 	bl	8000ab8 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df2:	e00f      	b.n	8001e14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df4:	f7fe fe60 	bl	8000ab8 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d908      	bls.n	8001e14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e146      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	42420000 	.word	0x42420000
 8001e10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e14:	4b92      	ldr	r3, [pc, #584]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1e9      	bne.n	8001df4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 80a6 	beq.w	8001f7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e32:	4b8b      	ldr	r3, [pc, #556]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10d      	bne.n	8001e5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	4b88      	ldr	r3, [pc, #544]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	4a87      	ldr	r2, [pc, #540]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e48:	61d3      	str	r3, [r2, #28]
 8001e4a:	4b85      	ldr	r3, [pc, #532]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e56:	2301      	movs	r3, #1
 8001e58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5a:	4b82      	ldr	r3, [pc, #520]	; (8002064 <HAL_RCC_OscConfig+0x4c8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d118      	bne.n	8001e98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e66:	4b7f      	ldr	r3, [pc, #508]	; (8002064 <HAL_RCC_OscConfig+0x4c8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a7e      	ldr	r2, [pc, #504]	; (8002064 <HAL_RCC_OscConfig+0x4c8>)
 8001e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e72:	f7fe fe21 	bl	8000ab8 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e7a:	f7fe fe1d 	bl	8000ab8 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b64      	cmp	r3, #100	; 0x64
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e103      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8c:	4b75      	ldr	r3, [pc, #468]	; (8002064 <HAL_RCC_OscConfig+0x4c8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0f0      	beq.n	8001e7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d106      	bne.n	8001eae <HAL_RCC_OscConfig+0x312>
 8001ea0:	4b6f      	ldr	r3, [pc, #444]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	4a6e      	ldr	r2, [pc, #440]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6213      	str	r3, [r2, #32]
 8001eac:	e02d      	b.n	8001f0a <HAL_RCC_OscConfig+0x36e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x334>
 8001eb6:	4b6a      	ldr	r3, [pc, #424]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	4a69      	ldr	r2, [pc, #420]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	f023 0301 	bic.w	r3, r3, #1
 8001ec0:	6213      	str	r3, [r2, #32]
 8001ec2:	4b67      	ldr	r3, [pc, #412]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	4a66      	ldr	r2, [pc, #408]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	f023 0304 	bic.w	r3, r3, #4
 8001ecc:	6213      	str	r3, [r2, #32]
 8001ece:	e01c      	b.n	8001f0a <HAL_RCC_OscConfig+0x36e>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	2b05      	cmp	r3, #5
 8001ed6:	d10c      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x356>
 8001ed8:	4b61      	ldr	r3, [pc, #388]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	4a60      	ldr	r2, [pc, #384]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ede:	f043 0304 	orr.w	r3, r3, #4
 8001ee2:	6213      	str	r3, [r2, #32]
 8001ee4:	4b5e      	ldr	r3, [pc, #376]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	4a5d      	ldr	r2, [pc, #372]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6213      	str	r3, [r2, #32]
 8001ef0:	e00b      	b.n	8001f0a <HAL_RCC_OscConfig+0x36e>
 8001ef2:	4b5b      	ldr	r3, [pc, #364]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	4a5a      	ldr	r2, [pc, #360]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	f023 0301 	bic.w	r3, r3, #1
 8001efc:	6213      	str	r3, [r2, #32]
 8001efe:	4b58      	ldr	r3, [pc, #352]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	4a57      	ldr	r2, [pc, #348]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	f023 0304 	bic.w	r3, r3, #4
 8001f08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d015      	beq.n	8001f3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f12:	f7fe fdd1 	bl	8000ab8 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f18:	e00a      	b.n	8001f30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1a:	f7fe fdcd 	bl	8000ab8 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e0b1      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f30:	4b4b      	ldr	r3, [pc, #300]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0ee      	beq.n	8001f1a <HAL_RCC_OscConfig+0x37e>
 8001f3c:	e014      	b.n	8001f68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3e:	f7fe fdbb 	bl	8000ab8 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f44:	e00a      	b.n	8001f5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f46:	f7fe fdb7 	bl	8000ab8 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e09b      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5c:	4b40      	ldr	r3, [pc, #256]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1ee      	bne.n	8001f46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f68:	7dfb      	ldrb	r3, [r7, #23]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d105      	bne.n	8001f7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f6e:	4b3c      	ldr	r3, [pc, #240]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	4a3b      	ldr	r2, [pc, #236]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 8087 	beq.w	8002092 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f84:	4b36      	ldr	r3, [pc, #216]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 030c 	and.w	r3, r3, #12
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d061      	beq.n	8002054 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d146      	bne.n	8002026 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f98:	4b33      	ldr	r3, [pc, #204]	; (8002068 <HAL_RCC_OscConfig+0x4cc>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9e:	f7fe fd8b 	bl	8000ab8 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa6:	f7fe fd87 	bl	8000ab8 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e06d      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb8:	4b29      	ldr	r3, [pc, #164]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1f0      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fcc:	d108      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fce:	4b24      	ldr	r3, [pc, #144]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	4921      	ldr	r1, [pc, #132]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fe0:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a19      	ldr	r1, [r3, #32]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	430b      	orrs	r3, r1
 8001ff2:	491b      	ldr	r1, [pc, #108]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <HAL_RCC_OscConfig+0x4cc>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffe:	f7fe fd5b 	bl	8000ab8 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002006:	f7fe fd57 	bl	8000ab8 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e03d      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f0      	beq.n	8002006 <HAL_RCC_OscConfig+0x46a>
 8002024:	e035      	b.n	8002092 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002026:	4b10      	ldr	r3, [pc, #64]	; (8002068 <HAL_RCC_OscConfig+0x4cc>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7fe fd44 	bl	8000ab8 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002034:	f7fe fd40 	bl	8000ab8 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e026      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x498>
 8002052:	e01e      	b.n	8002092 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d107      	bne.n	800206c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e019      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
 8002060:	40021000 	.word	0x40021000
 8002064:	40007000 	.word	0x40007000
 8002068:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <HAL_RCC_OscConfig+0x500>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	429a      	cmp	r2, r3
 800207e:	d106      	bne.n	800208e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208a:	429a      	cmp	r2, r3
 800208c:	d001      	beq.n	8002092 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40021000 	.word	0x40021000

080020a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0d0      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020b4:	4b6a      	ldr	r3, [pc, #424]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d910      	bls.n	80020e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c2:	4b67      	ldr	r3, [pc, #412]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 0207 	bic.w	r2, r3, #7
 80020ca:	4965      	ldr	r1, [pc, #404]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d2:	4b63      	ldr	r3, [pc, #396]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0b8      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d020      	beq.n	8002132 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020fc:	4b59      	ldr	r3, [pc, #356]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	4a58      	ldr	r2, [pc, #352]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002106:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002114:	4b53      	ldr	r3, [pc, #332]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	4a52      	ldr	r2, [pc, #328]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800211e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002120:	4b50      	ldr	r3, [pc, #320]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	494d      	ldr	r1, [pc, #308]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d040      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d107      	bne.n	8002156 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002146:	4b47      	ldr	r3, [pc, #284]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d115      	bne.n	800217e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e07f      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d107      	bne.n	800216e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215e:	4b41      	ldr	r3, [pc, #260]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d109      	bne.n	800217e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e073      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216e:	4b3d      	ldr	r3, [pc, #244]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e06b      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800217e:	4b39      	ldr	r3, [pc, #228]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f023 0203 	bic.w	r2, r3, #3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	4936      	ldr	r1, [pc, #216]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	4313      	orrs	r3, r2
 800218e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002190:	f7fe fc92 	bl	8000ab8 <HAL_GetTick>
 8002194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002196:	e00a      	b.n	80021ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002198:	f7fe fc8e 	bl	8000ab8 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e053      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ae:	4b2d      	ldr	r3, [pc, #180]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 020c 	and.w	r2, r3, #12
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	429a      	cmp	r2, r3
 80021be:	d1eb      	bne.n	8002198 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021c0:	4b27      	ldr	r3, [pc, #156]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d210      	bcs.n	80021f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	4b24      	ldr	r3, [pc, #144]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 0207 	bic.w	r2, r3, #7
 80021d6:	4922      	ldr	r1, [pc, #136]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	4313      	orrs	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021de:	4b20      	ldr	r3, [pc, #128]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e032      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d008      	beq.n	800220e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021fc:	4b19      	ldr	r3, [pc, #100]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4916      	ldr	r1, [pc, #88]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	4313      	orrs	r3, r2
 800220c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d009      	beq.n	800222e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800221a:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	490e      	ldr	r1, [pc, #56]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	4313      	orrs	r3, r2
 800222c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800222e:	f000 f821 	bl	8002274 <HAL_RCC_GetSysClockFreq>
 8002232:	4602      	mov	r2, r0
 8002234:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	490a      	ldr	r1, [pc, #40]	; (8002268 <HAL_RCC_ClockConfig+0x1c8>)
 8002240:	5ccb      	ldrb	r3, [r1, r3]
 8002242:	fa22 f303 	lsr.w	r3, r2, r3
 8002246:	4a09      	ldr	r2, [pc, #36]	; (800226c <HAL_RCC_ClockConfig+0x1cc>)
 8002248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <HAL_RCC_ClockConfig+0x1d0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe fbf0 	bl	8000a34 <HAL_InitTick>

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40022000 	.word	0x40022000
 8002264:	40021000 	.word	0x40021000
 8002268:	080042f8 	.word	0x080042f8
 800226c:	20000000 	.word	0x20000000
 8002270:	20000004 	.word	0x20000004

08002274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	2300      	movs	r3, #0
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	2300      	movs	r3, #0
 8002288:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800228e:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <HAL_RCC_GetSysClockFreq+0x94>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b04      	cmp	r3, #4
 800229c:	d002      	beq.n	80022a4 <HAL_RCC_GetSysClockFreq+0x30>
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d003      	beq.n	80022aa <HAL_RCC_GetSysClockFreq+0x36>
 80022a2:	e027      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022a4:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_RCC_GetSysClockFreq+0x98>)
 80022a6:	613b      	str	r3, [r7, #16]
      break;
 80022a8:	e027      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	0c9b      	lsrs	r3, r3, #18
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	4a17      	ldr	r2, [pc, #92]	; (8002310 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022b4:	5cd3      	ldrb	r3, [r2, r3]
 80022b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d010      	beq.n	80022e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_RCC_GetSysClockFreq+0x94>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	0c5b      	lsrs	r3, r3, #17
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	4a11      	ldr	r2, [pc, #68]	; (8002314 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022ce:	5cd3      	ldrb	r3, [r2, r3]
 80022d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a0d      	ldr	r2, [pc, #52]	; (800230c <HAL_RCC_GetSysClockFreq+0x98>)
 80022d6:	fb03 f202 	mul.w	r2, r3, r2
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	e004      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a0c      	ldr	r2, [pc, #48]	; (8002318 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022e8:	fb02 f303 	mul.w	r3, r2, r3
 80022ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	613b      	str	r3, [r7, #16]
      break;
 80022f2:	e002      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <HAL_RCC_GetSysClockFreq+0x98>)
 80022f6:	613b      	str	r3, [r7, #16]
      break;
 80022f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022fa:	693b      	ldr	r3, [r7, #16]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	371c      	adds	r7, #28
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40021000 	.word	0x40021000
 800230c:	007a1200 	.word	0x007a1200
 8002310:	08004310 	.word	0x08004310
 8002314:	08004320 	.word	0x08004320
 8002318:	003d0900 	.word	0x003d0900

0800231c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002320:	4b02      	ldr	r3, [pc, #8]	; (800232c <HAL_RCC_GetHCLKFreq+0x10>)
 8002322:	681b      	ldr	r3, [r3, #0]
}
 8002324:	4618      	mov	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr
 800232c:	20000000 	.word	0x20000000

08002330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002334:	f7ff fff2 	bl	800231c <HAL_RCC_GetHCLKFreq>
 8002338:	4602      	mov	r2, r0
 800233a:	4b05      	ldr	r3, [pc, #20]	; (8002350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	0a1b      	lsrs	r3, r3, #8
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	4903      	ldr	r1, [pc, #12]	; (8002354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002346:	5ccb      	ldrb	r3, [r1, r3]
 8002348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800234c:	4618      	mov	r0, r3
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40021000 	.word	0x40021000
 8002354:	08004308 	.word	0x08004308

08002358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800235c:	f7ff ffde 	bl	800231c <HAL_RCC_GetHCLKFreq>
 8002360:	4602      	mov	r2, r0
 8002362:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	0adb      	lsrs	r3, r3, #11
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	4903      	ldr	r1, [pc, #12]	; (800237c <HAL_RCC_GetPCLK2Freq+0x24>)
 800236e:	5ccb      	ldrb	r3, [r1, r3]
 8002370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002374:	4618      	mov	r0, r3
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40021000 	.word	0x40021000
 800237c:	08004308 	.word	0x08004308

08002380 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002388:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <RCC_Delay+0x34>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <RCC_Delay+0x38>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	0a5b      	lsrs	r3, r3, #9
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	fb02 f303 	mul.w	r3, r2, r3
 800239a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800239c:	bf00      	nop
  }
  while (Delay --);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	1e5a      	subs	r2, r3, #1
 80023a2:	60fa      	str	r2, [r7, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1f9      	bne.n	800239c <RCC_Delay+0x1c>
}
 80023a8:	bf00      	nop
 80023aa:	bf00      	nop
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr
 80023b4:	20000000 	.word	0x20000000
 80023b8:	10624dd3 	.word	0x10624dd3

080023bc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d07d      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80023d8:	2300      	movs	r3, #0
 80023da:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023dc:	4b4f      	ldr	r3, [pc, #316]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10d      	bne.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e8:	4b4c      	ldr	r3, [pc, #304]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	4a4b      	ldr	r2, [pc, #300]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f2:	61d3      	str	r3, [r2, #28]
 80023f4:	4b49      	ldr	r3, [pc, #292]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002400:	2301      	movs	r3, #1
 8002402:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002404:	4b46      	ldr	r3, [pc, #280]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240c:	2b00      	cmp	r3, #0
 800240e:	d118      	bne.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002410:	4b43      	ldr	r3, [pc, #268]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a42      	ldr	r2, [pc, #264]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800241c:	f7fe fb4c 	bl	8000ab8 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002422:	e008      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002424:	f7fe fb48 	bl	8000ab8 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b64      	cmp	r3, #100	; 0x64
 8002430:	d901      	bls.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e06d      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002436:	4b3a      	ldr	r3, [pc, #232]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002442:	4b36      	ldr	r3, [pc, #216]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800244a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d02e      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	429a      	cmp	r2, r3
 800245e:	d027      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002460:	4b2e      	ldr	r3, [pc, #184]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002468:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800246a:	4b2e      	ldr	r3, [pc, #184]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800246c:	2201      	movs	r2, #1
 800246e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002470:	4b2c      	ldr	r3, [pc, #176]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002476:	4a29      	ldr	r2, [pc, #164]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d014      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002486:	f7fe fb17 	bl	8000ab8 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248c:	e00a      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248e:	f7fe fb13 	bl	8000ab8 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	f241 3288 	movw	r2, #5000	; 0x1388
 800249c:	4293      	cmp	r3, r2
 800249e:	d901      	bls.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e036      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a4:	4b1d      	ldr	r3, [pc, #116]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0ee      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024b0:	4b1a      	ldr	r3, [pc, #104]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	4917      	ldr	r1, [pc, #92]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024c2:	7dfb      	ldrb	r3, [r7, #23]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d105      	bne.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c8:	4b14      	ldr	r3, [pc, #80]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	4a13      	ldr	r2, [pc, #76]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024e0:	4b0e      	ldr	r3, [pc, #56]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	490b      	ldr	r1, [pc, #44]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0310 	and.w	r3, r3, #16
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d008      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024fe:	4b07      	ldr	r3, [pc, #28]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	4904      	ldr	r1, [pc, #16]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000
 8002520:	40007000 	.word	0x40007000
 8002524:	42420440 	.word	0x42420440

08002528 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e096      	b.n	8002668 <HAL_SPI_Init+0x140>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	2b00      	cmp	r3, #0
 8002540:	d108      	bne.n	8002554 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800254a:	d009      	beq.n	8002560 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	61da      	str	r2, [r3, #28]
 8002552:	e005      	b.n	8002560 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d126      	bne.n	80025c0 <HAL_SPI_Init+0x98>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a3c      	ldr	r2, [pc, #240]	; (8002670 <HAL_SPI_Init+0x148>)
 800257e:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a3c      	ldr	r2, [pc, #240]	; (8002674 <HAL_SPI_Init+0x14c>)
 8002584:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a3b      	ldr	r2, [pc, #236]	; (8002678 <HAL_SPI_Init+0x150>)
 800258a:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a3b      	ldr	r2, [pc, #236]	; (800267c <HAL_SPI_Init+0x154>)
 8002590:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a3a      	ldr	r2, [pc, #232]	; (8002680 <HAL_SPI_Init+0x158>)
 8002596:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a3a      	ldr	r2, [pc, #232]	; (8002684 <HAL_SPI_Init+0x15c>)
 800259c:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a39      	ldr	r2, [pc, #228]	; (8002688 <HAL_SPI_Init+0x160>)
 80025a2:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a39      	ldr	r2, [pc, #228]	; (800268c <HAL_SPI_Init+0x164>)
 80025a8:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d102      	bne.n	80025b8 <HAL_SPI_Init+0x90>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a36      	ldr	r2, [pc, #216]	; (8002690 <HAL_SPI_Init+0x168>)
 80025b6:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2202      	movs	r2, #2
 80025c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80025e8:	431a      	orrs	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	431a      	orrs	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002610:	431a      	orrs	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002624:	ea42 0103 	orr.w	r1, r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	0c1a      	lsrs	r2, r3, #16
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f002 0204 	and.w	r2, r2, #4
 8002646:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	69da      	ldr	r2, [r3, #28]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002656:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	08002991 	.word	0x08002991
 8002674:	080029a3 	.word	0x080029a3
 8002678:	080029b5 	.word	0x080029b5
 800267c:	080029c7 	.word	0x080029c7
 8002680:	080029d9 	.word	0x080029d9
 8002684:	080029eb 	.word	0x080029eb
 8002688:	080029fd 	.word	0x080029fd
 800268c:	08002a0f 	.word	0x08002a0f
 8002690:	080005cd 	.word	0x080005cd

08002694 <HAL_SPI_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_RegisterCallback(SPI_HandleTypeDef *hspi, HAL_SPI_CallbackIDTypeDef CallbackID,
                                           pSPI_CallbackTypeDef pCallback)
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	460b      	mov	r3, r1
 800269e:	607a      	str	r2, [r7, #4]
 80026a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d107      	bne.n	80026bc <HAL_SPI_RegisterCallback+0x28>
  {
    /* Update the error code */
    hspi->ErrorCode |= HAL_SPI_ERROR_INVALID_CALLBACK;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	655a      	str	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e086      	b.n	80027ca <HAL_SPI_RegisterCallback+0x136>
  }
  /* Process locked */
  __HAL_LOCK(hspi);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_SPI_RegisterCallback+0x36>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e07f      	b.n	80027ca <HAL_SPI_RegisterCallback+0x136>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (HAL_SPI_STATE_READY == hspi->State)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d14b      	bne.n	8002776 <HAL_SPI_RegisterCallback+0xe2>
  {
    switch (CallbackID)
 80026de:	7afb      	ldrb	r3, [r7, #11]
 80026e0:	2b09      	cmp	r3, #9
 80026e2:	d83f      	bhi.n	8002764 <HAL_SPI_RegisterCallback+0xd0>
 80026e4:	a201      	add	r2, pc, #4	; (adr r2, 80026ec <HAL_SPI_RegisterCallback+0x58>)
 80026e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ea:	bf00      	nop
 80026ec:	08002715 	.word	0x08002715
 80026f0:	0800271d 	.word	0x0800271d
 80026f4:	08002725 	.word	0x08002725
 80026f8:	0800272d 	.word	0x0800272d
 80026fc:	08002735 	.word	0x08002735
 8002700:	0800273d 	.word	0x0800273d
 8002704:	08002745 	.word	0x08002745
 8002708:	0800274d 	.word	0x0800274d
 800270c:	08002755 	.word	0x08002755
 8002710:	0800275d 	.word	0x0800275d
    {
      case HAL_SPI_TX_COMPLETE_CB_ID :
        hspi->TxCpltCallback = pCallback;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800271a:	e051      	b.n	80027c0 <HAL_SPI_RegisterCallback+0x12c>

      case HAL_SPI_RX_COMPLETE_CB_ID :
        hspi->RxCpltCallback = pCallback;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8002722:	e04d      	b.n	80027c0 <HAL_SPI_RegisterCallback+0x12c>

      case HAL_SPI_TX_RX_COMPLETE_CB_ID :
        hspi->TxRxCpltCallback = pCallback;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800272a:	e049      	b.n	80027c0 <HAL_SPI_RegisterCallback+0x12c>

      case HAL_SPI_TX_HALF_COMPLETE_CB_ID :
        hspi->TxHalfCpltCallback = pCallback;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8002732:	e045      	b.n	80027c0 <HAL_SPI_RegisterCallback+0x12c>

      case HAL_SPI_RX_HALF_COMPLETE_CB_ID :
        hspi->RxHalfCpltCallback = pCallback;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800273a:	e041      	b.n	80027c0 <HAL_SPI_RegisterCallback+0x12c>

      case HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID :
        hspi->TxRxHalfCpltCallback = pCallback;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8002742:	e03d      	b.n	80027c0 <HAL_SPI_RegisterCallback+0x12c>

      case HAL_SPI_ERROR_CB_ID :
        hspi->ErrorCallback = pCallback;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800274a:	e039      	b.n	80027c0 <HAL_SPI_RegisterCallback+0x12c>

      case HAL_SPI_ABORT_CB_ID :
        hspi->AbortCpltCallback = pCallback;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8002752:	e035      	b.n	80027c0 <HAL_SPI_RegisterCallback+0x12c>

      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800275a:	e031      	b.n	80027c0 <HAL_SPI_RegisterCallback+0x12c>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8002762:	e02d      	b.n	80027c0 <HAL_SPI_RegisterCallback+0x12c>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002768:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Return error status */
        status =  HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	75fb      	strb	r3, [r7, #23]
        break;
 8002774:	e024      	b.n	80027c0 <HAL_SPI_RegisterCallback+0x12c>
    }
  }
  else if (HAL_SPI_STATE_RESET == hspi->State)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d116      	bne.n	80027b0 <HAL_SPI_RegisterCallback+0x11c>
  {
    switch (CallbackID)
 8002782:	7afb      	ldrb	r3, [r7, #11]
 8002784:	2b08      	cmp	r3, #8
 8002786:	d002      	beq.n	800278e <HAL_SPI_RegisterCallback+0xfa>
 8002788:	2b09      	cmp	r3, #9
 800278a:	d004      	beq.n	8002796 <HAL_SPI_RegisterCallback+0x102>
 800278c:	e007      	b.n	800279e <HAL_SPI_RegisterCallback+0x10a>
    {
      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8002794:	e014      	b.n	80027c0 <HAL_SPI_RegisterCallback+0x12c>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800279c:	e010      	b.n	80027c0 <HAL_SPI_RegisterCallback+0x12c>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Return error status */
        status =  HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	75fb      	strb	r3, [r7, #23]
        break;
 80027ae:	e007      	b.n	80027c0 <HAL_SPI_RegisterCallback+0x12c>
    }
  }
  else
  {
    /* Update the error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status =  HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return status;
 80027c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	371c      	adds	r7, #28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr

080027d4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10e      	bne.n	8002814 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d009      	beq.n	8002814 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002806:	2b00      	cmp	r3, #0
 8002808:	d004      	beq.n	8002814 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	4798      	blx	r3
    return;
 8002812:	e0b8      	b.n	8002986 <HAL_SPI_IRQHandler+0x1b2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d009      	beq.n	8002832 <HAL_SPI_IRQHandler+0x5e>
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002824:	2b00      	cmp	r3, #0
 8002826:	d004      	beq.n	8002832 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	4798      	blx	r3
    return;
 8002830:	e0a9      	b.n	8002986 <HAL_SPI_IRQHandler+0x1b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	f003 0320 	and.w	r3, r3, #32
 8002838:	2b00      	cmp	r3, #0
 800283a:	d105      	bne.n	8002848 <HAL_SPI_IRQHandler+0x74>
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 809f 	beq.w	8002986 <HAL_SPI_IRQHandler+0x1b2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f003 0320 	and.w	r3, r3, #32
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 8099 	beq.w	8002986 <HAL_SPI_IRQHandler+0x1b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d023      	beq.n	80028a6 <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b03      	cmp	r3, #3
 8002868:	d011      	beq.n	800288e <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286e:	f043 0204 	orr.w	r2, r3, #4
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	e00b      	b.n	80028a6 <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800288e:	2300      	movs	r3, #0
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	693b      	ldr	r3, [r7, #16]
        return;
 80028a4:	e06f      	b.n	8002986 <HAL_SPI_IRQHandler+0x1b2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	f003 0320 	and.w	r3, r3, #32
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d014      	beq.n	80028da <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b4:	f043 0201 	orr.w	r2, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80028bc:	2300      	movs	r3, #0
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d050      	beq.n	8002984 <HAL_SPI_IRQHandler+0x1b0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028f0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d104      	bne.n	800290e <HAL_SPI_IRQHandler+0x13a>
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d034      	beq.n	8002978 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0203 	bic.w	r2, r2, #3
 800291c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002922:	2b00      	cmp	r3, #0
 8002924:	d011      	beq.n	800294a <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292a:	4a18      	ldr	r2, [pc, #96]	; (800298c <HAL_SPI_IRQHandler+0x1b8>)
 800292c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002932:	4618      	mov	r0, r3
 8002934:	f7fe feee 	bl	8001714 <HAL_DMA_Abort_IT>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002942:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800294e:	2b00      	cmp	r3, #0
 8002950:	d017      	beq.n	8002982 <HAL_SPI_IRQHandler+0x1ae>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002956:	4a0d      	ldr	r2, [pc, #52]	; (800298c <HAL_SPI_IRQHandler+0x1b8>)
 8002958:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe fed8 	bl	8001714 <HAL_DMA_Abort_IT>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00b      	beq.n	8002982 <HAL_SPI_IRQHandler+0x1ae>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002976:	e004      	b.n	8002982 <HAL_SPI_IRQHandler+0x1ae>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002980:	e000      	b.n	8002984 <HAL_SPI_IRQHandler+0x1b0>
        if (hspi->hdmatx != NULL)
 8002982:	bf00      	nop
    return;
 8002984:	bf00      	nop
  }
}
 8002986:	3720      	adds	r7, #32
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	08002a21 	.word	0x08002a21

08002990 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr

080029a2 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr

080029b4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr

080029c6 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr

080029ea <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr

08002a0e <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e04d      	b.n	8002afa <HAL_UART_Init+0xae>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d111      	bne.n	8002a8e <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 fc72 	bl	800335c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d102      	bne.n	8002a86 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a20      	ldr	r2, [pc, #128]	; (8002b04 <HAL_UART_Init+0xb8>)
 8002a84:	671a      	str	r2, [r3, #112]	; 0x70
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2224      	movs	r2, #36	; 0x24
 8002a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aa4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 fed4 	bl	8003854 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691a      	ldr	r2, [r3, #16]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002aba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695a      	ldr	r2, [r3, #20]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002aca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ada:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2220      	movs	r2, #32
 8002aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	08000899 	.word	0x08000899

08002b08 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	460b      	mov	r3, r1
 8002b12:	607a      	str	r2, [r7, #4]
 8002b14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d107      	bne.n	8002b30 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b24:	f043 0220 	orr.w	r2, r3, #32
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	645a      	str	r2, [r3, #68]	; 0x44

    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e07c      	b.n	8002c2a <HAL_UART_RegisterCallback+0x122>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	d150      	bne.n	8002bde <HAL_UART_RegisterCallback+0xd6>
  {
    switch (CallbackID)
 8002b3c:	7afb      	ldrb	r3, [r7, #11]
 8002b3e:	2b0c      	cmp	r3, #12
 8002b40:	d844      	bhi.n	8002bcc <HAL_UART_RegisterCallback+0xc4>
 8002b42:	a201      	add	r2, pc, #4	; (adr r2, 8002b48 <HAL_UART_RegisterCallback+0x40>)
 8002b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b48:	08002b7d 	.word	0x08002b7d
 8002b4c:	08002b85 	.word	0x08002b85
 8002b50:	08002b8d 	.word	0x08002b8d
 8002b54:	08002b95 	.word	0x08002b95
 8002b58:	08002b9d 	.word	0x08002b9d
 8002b5c:	08002ba5 	.word	0x08002ba5
 8002b60:	08002bad 	.word	0x08002bad
 8002b64:	08002bb5 	.word	0x08002bb5
 8002b68:	08002bcd 	.word	0x08002bcd
 8002b6c:	08002bcd 	.word	0x08002bcd
 8002b70:	08002bcd 	.word	0x08002bcd
 8002b74:	08002bbd 	.word	0x08002bbd
 8002b78:	08002bc5 	.word	0x08002bc5
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8002b82:	e051      	b.n	8002c28 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8002b8a:	e04d      	b.n	8002c28 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8002b92:	e049      	b.n	8002c28 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8002b9a:	e045      	b.n	8002c28 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8002ba2:	e041      	b.n	8002c28 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8002baa:	e03d      	b.n	8002c28 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8002bb2:	e039      	b.n	8002c28 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8002bba:	e035      	b.n	8002c28 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8002bc2:	e031      	b.n	8002c28 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8002bca:	e02d      	b.n	8002c28 <HAL_UART_RegisterCallback+0x120>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd0:	f043 0220 	orr.w	r2, r3, #32
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Return error status */
        status =  HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	75fb      	strb	r3, [r7, #23]
        break;
 8002bdc:	e024      	b.n	8002c28 <HAL_UART_RegisterCallback+0x120>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d116      	bne.n	8002c18 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8002bea:	7afb      	ldrb	r3, [r7, #11]
 8002bec:	2b0b      	cmp	r3, #11
 8002bee:	d002      	beq.n	8002bf6 <HAL_UART_RegisterCallback+0xee>
 8002bf0:	2b0c      	cmp	r3, #12
 8002bf2:	d004      	beq.n	8002bfe <HAL_UART_RegisterCallback+0xf6>
 8002bf4:	e007      	b.n	8002c06 <HAL_UART_RegisterCallback+0xfe>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8002bfc:	e014      	b.n	8002c28 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8002c04:	e010      	b.n	8002c28 <HAL_UART_RegisterCallback+0x120>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	f043 0220 	orr.w	r2, r3, #32
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	645a      	str	r2, [r3, #68]	; 0x44

        /* Return error status */
        status =  HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	75fb      	strb	r3, [r7, #23]
        break;
 8002c16:	e007      	b.n	8002c28 <HAL_UART_RegisterCallback+0x120>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1c:	f043 0220 	orr.w	r2, r3, #32
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Return error status */
    status =  HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	371c      	adds	r7, #28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr

08002c34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	; 0x28
 8002c38:	af02      	add	r7, sp, #8
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	4613      	mov	r3, r2
 8002c42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b20      	cmp	r3, #32
 8002c52:	d16d      	bne.n	8002d30 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d002      	beq.n	8002c60 <HAL_UART_Transmit+0x2c>
 8002c5a:	88fb      	ldrh	r3, [r7, #6]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e066      	b.n	8002d32 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2221      	movs	r2, #33	; 0x21
 8002c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c72:	f7fd ff21 	bl	8000ab8 <HAL_GetTick>
 8002c76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	88fa      	ldrh	r2, [r7, #6]
 8002c7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	88fa      	ldrh	r2, [r7, #6]
 8002c82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c8c:	d108      	bne.n	8002ca0 <HAL_UART_Transmit+0x6c>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d104      	bne.n	8002ca0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	e003      	b.n	8002ca8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ca8:	e02a      	b.n	8002d00 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2180      	movs	r1, #128	; 0x80
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 fb87 	bl	80033c8 <UART_WaitOnFlagUntilTimeout>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e036      	b.n	8002d32 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10b      	bne.n	8002ce2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	3302      	adds	r3, #2
 8002cde:	61bb      	str	r3, [r7, #24]
 8002ce0:	e007      	b.n	8002cf2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	781a      	ldrb	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1cf      	bne.n	8002caa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2200      	movs	r2, #0
 8002d12:	2140      	movs	r1, #64	; 0x40
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 fb57 	bl	80033c8 <UART_WaitOnFlagUntilTimeout>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e006      	b.n	8002d32 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e000      	b.n	8002d32 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002d30:	2302      	movs	r3, #2
  }
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3720      	adds	r7, #32
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b084      	sub	sp, #16
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	60f8      	str	r0, [r7, #12]
 8002d42:	60b9      	str	r1, [r7, #8]
 8002d44:	4613      	mov	r3, r2
 8002d46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b20      	cmp	r3, #32
 8002d52:	d112      	bne.n	8002d7a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <HAL_UART_Receive_IT+0x26>
 8002d5a:	88fb      	ldrh	r3, [r7, #6]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e00b      	b.n	8002d7c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d6a:	88fb      	ldrh	r3, [r7, #6]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	68b9      	ldr	r1, [r7, #8]
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 fb97 	bl	80034a4 <UART_Start_Receive_IT>
 8002d76:	4603      	mov	r3, r0
 8002d78:	e000      	b.n	8002d7c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002d7a:	2302      	movs	r3, #2
  }
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b0ba      	sub	sp, #232	; 0xe8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002dc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10f      	bne.n	8002dea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d009      	beq.n	8002dea <HAL_UART_IRQHandler+0x66>
 8002dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dda:	f003 0320 	and.w	r3, r3, #32
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fc76 	bl	80036d4 <UART_Receive_IT>
      return;
 8002de8:	e260      	b.n	80032ac <HAL_UART_IRQHandler+0x528>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002dea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 80e1 	beq.w	8002fb6 <HAL_UART_IRQHandler+0x232>
 8002df4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d106      	bne.n	8002e0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e04:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 80d4 	beq.w	8002fb6 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00b      	beq.n	8002e32 <HAL_UART_IRQHandler+0xae>
 8002e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d005      	beq.n	8002e32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2a:	f043 0201 	orr.w	r2, r3, #1
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00b      	beq.n	8002e56 <HAL_UART_IRQHandler+0xd2>
 8002e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4e:	f043 0202 	orr.w	r2, r3, #2
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00b      	beq.n	8002e7a <HAL_UART_IRQHandler+0xf6>
 8002e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d005      	beq.n	8002e7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e72:	f043 0204 	orr.w	r2, r3, #4
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d011      	beq.n	8002eaa <HAL_UART_IRQHandler+0x126>
 8002e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e8a:	f003 0320 	and.w	r3, r3, #32
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d105      	bne.n	8002e9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d005      	beq.n	8002eaa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	f043 0208 	orr.w	r2, r3, #8
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 81f7 	beq.w	80032a2 <HAL_UART_IRQHandler+0x51e>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb8:	f003 0320 	and.w	r3, r3, #32
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d008      	beq.n	8002ed2 <HAL_UART_IRQHandler+0x14e>
 8002ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ec4:	f003 0320 	and.w	r3, r3, #32
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 fc01 	bl	80036d4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	bf14      	ite	ne
 8002ee0:	2301      	movne	r3, #1
 8002ee2:	2300      	moveq	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d103      	bne.n	8002efe <HAL_UART_IRQHandler+0x17a>
 8002ef6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d051      	beq.n	8002fa2 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fb09 	bl	8003516 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d042      	beq.n	8002f98 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	3314      	adds	r3, #20
 8002f18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f20:	e853 3f00 	ldrex	r3, [r3]
 8002f24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	3314      	adds	r3, #20
 8002f3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f4e:	e841 2300 	strex	r3, r2, [r1]
 8002f52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1d9      	bne.n	8002f12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d013      	beq.n	8002f8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6a:	4a80      	ldr	r2, [pc, #512]	; (800316c <HAL_UART_IRQHandler+0x3e8>)
 8002f6c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fe fbce 	bl	8001714 <HAL_DMA_Abort_IT>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d019      	beq.n	8002fb2 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f88:	4610      	mov	r0, r2
 8002f8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f8c:	e011      	b.n	8002fb2 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f96:	e00c      	b.n	8002fb2 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa0:	e007      	b.n	8002fb2 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002fb0:	e177      	b.n	80032a2 <HAL_UART_IRQHandler+0x51e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb2:	bf00      	nop
    return;
 8002fb4:	e175      	b.n	80032a2 <HAL_UART_IRQHandler+0x51e>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	f040 8151 	bne.w	8003262 <HAL_UART_IRQHandler+0x4de>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fc4:	f003 0310 	and.w	r3, r3, #16
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 814a 	beq.w	8003262 <HAL_UART_IRQHandler+0x4de>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 8143 	beq.w	8003262 <HAL_UART_IRQHandler+0x4de>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60bb      	str	r3, [r7, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	60bb      	str	r3, [r7, #8]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	60bb      	str	r3, [r7, #8]
 8002ff0:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 80b7 	beq.w	8003170 <HAL_UART_IRQHandler+0x3ec>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800300e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 8147 	beq.w	80032a6 <HAL_UART_IRQHandler+0x522>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800301c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003020:	429a      	cmp	r2, r3
 8003022:	f080 8140 	bcs.w	80032a6 <HAL_UART_IRQHandler+0x522>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800302c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	2b20      	cmp	r3, #32
 8003036:	f000 8088 	beq.w	800314a <HAL_UART_IRQHandler+0x3c6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	330c      	adds	r3, #12
 8003040:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003044:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003048:	e853 3f00 	ldrex	r3, [r3]
 800304c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003050:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003058:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	330c      	adds	r3, #12
 8003062:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003066:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800306a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003072:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003076:	e841 2300 	strex	r3, r2, [r1]
 800307a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800307e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1d9      	bne.n	800303a <HAL_UART_IRQHandler+0x2b6>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	3314      	adds	r3, #20
 800308c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003090:	e853 3f00 	ldrex	r3, [r3]
 8003094:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003096:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003098:	f023 0301 	bic.w	r3, r3, #1
 800309c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	3314      	adds	r3, #20
 80030a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80030ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80030b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80030b6:	e841 2300 	strex	r3, r2, [r1]
 80030ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80030bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1e1      	bne.n	8003086 <HAL_UART_IRQHandler+0x302>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	3314      	adds	r3, #20
 80030c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030cc:	e853 3f00 	ldrex	r3, [r3]
 80030d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80030d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	3314      	adds	r3, #20
 80030e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80030e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80030ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80030ee:	e841 2300 	strex	r3, r2, [r1]
 80030f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80030f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1e3      	bne.n	80030c2 <HAL_UART_IRQHandler+0x33e>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	330c      	adds	r3, #12
 800310e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003112:	e853 3f00 	ldrex	r3, [r3]
 8003116:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800311a:	f023 0310 	bic.w	r3, r3, #16
 800311e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	330c      	adds	r3, #12
 8003128:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800312c:	65ba      	str	r2, [r7, #88]	; 0x58
 800312e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003130:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003132:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003134:	e841 2300 	strex	r3, r2, [r1]
 8003138:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800313a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1e3      	bne.n	8003108 <HAL_UART_IRQHandler+0x384>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003144:	4618      	mov	r0, r3
 8003146:	f7fe faaa 	bl	800169e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2202      	movs	r2, #2
 800314e:	635a      	str	r2, [r3, #52]	; 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800315c:	b292      	uxth	r2, r2
 800315e:	1a8a      	subs	r2, r1, r2
 8003160:	b292      	uxth	r2, r2
 8003162:	4611      	mov	r1, r2
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003168:	e09d      	b.n	80032a6 <HAL_UART_IRQHandler+0x522>
 800316a:	bf00      	nop
 800316c:	080035db 	.word	0x080035db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003178:	b29b      	uxth	r3, r3
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003184:	b29b      	uxth	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 808f 	beq.w	80032aa <HAL_UART_IRQHandler+0x526>
          && (nb_rx_data > 0U))
 800318c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 808a 	beq.w	80032aa <HAL_UART_IRQHandler+0x526>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	330c      	adds	r3, #12
 800319c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a0:	e853 3f00 	ldrex	r3, [r3]
 80031a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	330c      	adds	r3, #12
 80031b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80031ba:	647a      	str	r2, [r7, #68]	; 0x44
 80031bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031c2:	e841 2300 	strex	r3, r2, [r1]
 80031c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1e3      	bne.n	8003196 <HAL_UART_IRQHandler+0x412>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3314      	adds	r3, #20
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	e853 3f00 	ldrex	r3, [r3]
 80031dc:	623b      	str	r3, [r7, #32]
   return(result);
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	f023 0301 	bic.w	r3, r3, #1
 80031e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3314      	adds	r3, #20
 80031ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031f2:	633a      	str	r2, [r7, #48]	; 0x30
 80031f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031fa:	e841 2300 	strex	r3, r2, [r1]
 80031fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1e3      	bne.n	80031ce <HAL_UART_IRQHandler+0x44a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	330c      	adds	r3, #12
 800321a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	e853 3f00 	ldrex	r3, [r3]
 8003222:	60fb      	str	r3, [r7, #12]
   return(result);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f023 0310 	bic.w	r3, r3, #16
 800322a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	330c      	adds	r3, #12
 8003234:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003238:	61fa      	str	r2, [r7, #28]
 800323a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323c:	69b9      	ldr	r1, [r7, #24]
 800323e:	69fa      	ldr	r2, [r7, #28]
 8003240:	e841 2300 	strex	r3, r2, [r1]
 8003244:	617b      	str	r3, [r7, #20]
   return(result);
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1e3      	bne.n	8003214 <HAL_UART_IRQHandler+0x490>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	635a      	str	r2, [r3, #52]	; 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003256:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800325a:	4611      	mov	r1, r2
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003260:	e023      	b.n	80032aa <HAL_UART_IRQHandler+0x526>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326a:	2b00      	cmp	r3, #0
 800326c:	d009      	beq.n	8003282 <HAL_UART_IRQHandler+0x4fe>
 800326e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_UART_IRQHandler+0x4fe>
  {
    UART_Transmit_IT(huart);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f9c2 	bl	8003604 <UART_Transmit_IT>
    return;
 8003280:	e014      	b.n	80032ac <HAL_UART_IRQHandler+0x528>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00e      	beq.n	80032ac <HAL_UART_IRQHandler+0x528>
 800328e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003296:	2b00      	cmp	r3, #0
 8003298:	d008      	beq.n	80032ac <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 fa01 	bl	80036a2 <UART_EndTransmit_IT>
    return;
 80032a0:	e004      	b.n	80032ac <HAL_UART_IRQHandler+0x528>
    return;
 80032a2:	bf00      	nop
 80032a4:	e002      	b.n	80032ac <HAL_UART_IRQHandler+0x528>
      return;
 80032a6:	bf00      	nop
 80032a8:	e000      	b.n	80032ac <HAL_UART_IRQHandler+0x528>
      return;
 80032aa:	bf00      	nop
  }
}
 80032ac:	37e8      	adds	r7, #232	; 0xe8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop

080032b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr

080032c6 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr

080032d8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr

080032ea <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr

080032fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	bc80      	pop	{r7}
 800330c:	4770      	bx	lr

0800330e <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr

08003320 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	bc80      	pop	{r7}
 8003330:	4770      	bx	lr

08003332 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr

08003344 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	460b      	mov	r3, r1
 800334e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	bc80      	pop	{r7}
 8003358:	4770      	bx	lr
	...

0800335c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a0f      	ldr	r2, [pc, #60]	; (80033a4 <UART_InitCallbacksToDefault+0x48>)
 8003368:	649a      	str	r2, [r3, #72]	; 0x48
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a0e      	ldr	r2, [pc, #56]	; (80033a8 <UART_InitCallbacksToDefault+0x4c>)
 800336e:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a0e      	ldr	r2, [pc, #56]	; (80033ac <UART_InitCallbacksToDefault+0x50>)
 8003374:	651a      	str	r2, [r3, #80]	; 0x50
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a0d      	ldr	r2, [pc, #52]	; (80033b0 <UART_InitCallbacksToDefault+0x54>)
 800337a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a0d      	ldr	r2, [pc, #52]	; (80033b4 <UART_InitCallbacksToDefault+0x58>)
 8003380:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a0c      	ldr	r2, [pc, #48]	; (80033b8 <UART_InitCallbacksToDefault+0x5c>)
 8003386:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a0c      	ldr	r2, [pc, #48]	; (80033bc <UART_InitCallbacksToDefault+0x60>)
 800338c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a0b      	ldr	r2, [pc, #44]	; (80033c0 <UART_InitCallbacksToDefault+0x64>)
 8003392:	665a      	str	r2, [r3, #100]	; 0x64
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a0b      	ldr	r2, [pc, #44]	; (80033c4 <UART_InitCallbacksToDefault+0x68>)
 8003398:	66da      	str	r2, [r3, #108]	; 0x6c

}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr
 80033a4:	080032c7 	.word	0x080032c7
 80033a8:	080032b5 	.word	0x080032b5
 80033ac:	080032eb 	.word	0x080032eb
 80033b0:	080032d9 	.word	0x080032d9
 80033b4:	080032fd 	.word	0x080032fd
 80033b8:	0800330f 	.word	0x0800330f
 80033bc:	08003321 	.word	0x08003321
 80033c0:	08003333 	.word	0x08003333
 80033c4:	08003345 	.word	0x08003345

080033c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b090      	sub	sp, #64	; 0x40
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	4613      	mov	r3, r2
 80033d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033d8:	e050      	b.n	800347c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e0:	d04c      	beq.n	800347c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d007      	beq.n	80033f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80033e8:	f7fd fb66 	bl	8000ab8 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d241      	bcs.n	800347c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	330c      	adds	r3, #12
 80033fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003402:	e853 3f00 	ldrex	r3, [r3]
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800340e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	330c      	adds	r3, #12
 8003416:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003418:	637a      	str	r2, [r7, #52]	; 0x34
 800341a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800341e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003420:	e841 2300 	strex	r3, r2, [r1]
 8003424:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1e5      	bne.n	80033f8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	3314      	adds	r3, #20
 8003432:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	e853 3f00 	ldrex	r3, [r3]
 800343a:	613b      	str	r3, [r7, #16]
   return(result);
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f023 0301 	bic.w	r3, r3, #1
 8003442:	63bb      	str	r3, [r7, #56]	; 0x38
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	3314      	adds	r3, #20
 800344a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800344c:	623a      	str	r2, [r7, #32]
 800344e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003450:	69f9      	ldr	r1, [r7, #28]
 8003452:	6a3a      	ldr	r2, [r7, #32]
 8003454:	e841 2300 	strex	r3, r2, [r1]
 8003458:	61bb      	str	r3, [r7, #24]
   return(result);
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1e5      	bne.n	800342c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e00f      	b.n	800349c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	4013      	ands	r3, r2
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	429a      	cmp	r2, r3
 800348a:	bf0c      	ite	eq
 800348c:	2301      	moveq	r3, #1
 800348e:	2300      	movne	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	461a      	mov	r2, r3
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	429a      	cmp	r2, r3
 8003498:	d09f      	beq.n	80033da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3740      	adds	r7, #64	; 0x40
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	4613      	mov	r3, r2
 80034b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	88fa      	ldrh	r2, [r7, #6]
 80034bc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	88fa      	ldrh	r2, [r7, #6]
 80034c2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2222      	movs	r2, #34	; 0x22
 80034ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d007      	beq.n	80034ea <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034e8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695a      	ldr	r2, [r3, #20]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 0201 	orr.w	r2, r2, #1
 80034f8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f042 0220 	orr.w	r2, r2, #32
 8003508:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr

08003516 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003516:	b480      	push	{r7}
 8003518:	b095      	sub	sp, #84	; 0x54
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	330c      	adds	r3, #12
 8003524:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003528:	e853 3f00 	ldrex	r3, [r3]
 800352c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800352e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003530:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003534:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	330c      	adds	r3, #12
 800353c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800353e:	643a      	str	r2, [r7, #64]	; 0x40
 8003540:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003542:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003544:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003546:	e841 2300 	strex	r3, r2, [r1]
 800354a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800354c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1e5      	bne.n	800351e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	3314      	adds	r3, #20
 8003558:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	e853 3f00 	ldrex	r3, [r3]
 8003560:	61fb      	str	r3, [r7, #28]
   return(result);
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	f023 0301 	bic.w	r3, r3, #1
 8003568:	64bb      	str	r3, [r7, #72]	; 0x48
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	3314      	adds	r3, #20
 8003570:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003572:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003574:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003576:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003578:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800357a:	e841 2300 	strex	r3, r2, [r1]
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1e5      	bne.n	8003552 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	2b01      	cmp	r3, #1
 800358c:	d119      	bne.n	80035c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	330c      	adds	r3, #12
 8003594:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	e853 3f00 	ldrex	r3, [r3]
 800359c:	60bb      	str	r3, [r7, #8]
   return(result);
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	f023 0310 	bic.w	r3, r3, #16
 80035a4:	647b      	str	r3, [r7, #68]	; 0x44
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	330c      	adds	r3, #12
 80035ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035ae:	61ba      	str	r2, [r7, #24]
 80035b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b2:	6979      	ldr	r1, [r7, #20]
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	e841 2300 	strex	r3, r2, [r1]
 80035ba:	613b      	str	r3, [r7, #16]
   return(result);
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1e5      	bne.n	800358e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	631a      	str	r2, [r3, #48]	; 0x30
}
 80035d0:	bf00      	nop
 80035d2:	3754      	adds	r7, #84	; 0x54
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc80      	pop	{r7}
 80035d8:	4770      	bx	lr

080035da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b084      	sub	sp, #16
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035fc:	bf00      	nop
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b21      	cmp	r3, #33	; 0x21
 8003616:	d13e      	bne.n	8003696 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003620:	d114      	bne.n	800364c <UART_Transmit_IT+0x48>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d110      	bne.n	800364c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	881b      	ldrh	r3, [r3, #0]
 8003634:	461a      	mov	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800363e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	1c9a      	adds	r2, r3, #2
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	621a      	str	r2, [r3, #32]
 800364a:	e008      	b.n	800365e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	1c59      	adds	r1, r3, #1
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6211      	str	r1, [r2, #32]
 8003656:	781a      	ldrb	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003662:	b29b      	uxth	r3, r3
 8003664:	3b01      	subs	r3, #1
 8003666:	b29b      	uxth	r3, r3
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	4619      	mov	r1, r3
 800366c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10f      	bne.n	8003692 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003680:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68da      	ldr	r2, [r3, #12]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003690:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	e000      	b.n	8003698 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003696:	2302      	movs	r3, #2
  }
}
 8003698:	4618      	mov	r0, r3
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	bc80      	pop	{r7}
 80036a0:	4770      	bx	lr

080036a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b082      	sub	sp, #8
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2220      	movs	r2, #32
 80036be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08c      	sub	sp, #48	; 0x30
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b22      	cmp	r3, #34	; 0x22
 80036e6:	f040 80b0 	bne.w	800384a <UART_Receive_IT+0x176>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f2:	d117      	bne.n	8003724 <UART_Receive_IT+0x50>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d113      	bne.n	8003724 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003704:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	b29b      	uxth	r3, r3
 800370e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003712:	b29a      	uxth	r2, r3
 8003714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003716:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371c:	1c9a      	adds	r2, r3, #2
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	629a      	str	r2, [r3, #40]	; 0x28
 8003722:	e026      	b.n	8003772 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003728:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800372a:	2300      	movs	r3, #0
 800372c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003736:	d007      	beq.n	8003748 <UART_Receive_IT+0x74>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10a      	bne.n	8003756 <UART_Receive_IT+0x82>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d106      	bne.n	8003756 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	b2da      	uxtb	r2, r3
 8003750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003752:	701a      	strb	r2, [r3, #0]
 8003754:	e008      	b.n	8003768 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	b2db      	uxtb	r3, r3
 800375e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003762:	b2da      	uxtb	r2, r3
 8003764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003766:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003776:	b29b      	uxth	r3, r3
 8003778:	3b01      	subs	r3, #1
 800377a:	b29b      	uxth	r3, r3
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	4619      	mov	r1, r3
 8003780:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003782:	2b00      	cmp	r3, #0
 8003784:	d15f      	bne.n	8003846 <UART_Receive_IT+0x172>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0220 	bic.w	r2, r2, #32
 8003794:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695a      	ldr	r2, [r3, #20]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0201 	bic.w	r2, r2, #1
 80037b4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d136      	bne.n	800383a <UART_Receive_IT+0x166>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	330c      	adds	r3, #12
 80037d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	e853 3f00 	ldrex	r3, [r3]
 80037e0:	613b      	str	r3, [r7, #16]
   return(result);
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f023 0310 	bic.w	r3, r3, #16
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	330c      	adds	r3, #12
 80037f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f2:	623a      	str	r2, [r7, #32]
 80037f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f6:	69f9      	ldr	r1, [r7, #28]
 80037f8:	6a3a      	ldr	r2, [r7, #32]
 80037fa:	e841 2300 	strex	r3, r2, [r1]
 80037fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1e5      	bne.n	80037d2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0310 	and.w	r3, r3, #16
 8003810:	2b10      	cmp	r3, #16
 8003812:	d10a      	bne.n	800382a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003814:	2300      	movs	r3, #0
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8003832:	4611      	mov	r1, r2
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	4798      	blx	r3
 8003838:	e003      	b.n	8003842 <UART_Receive_IT+0x16e>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	e002      	b.n	800384c <UART_Receive_IT+0x178>
    }
    return HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	e000      	b.n	800384c <UART_Receive_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 800384a:	2302      	movs	r3, #2
  }
}
 800384c:	4618      	mov	r0, r3
 800384e:	3730      	adds	r7, #48	; 0x30
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	4313      	orrs	r3, r2
 8003882:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800388e:	f023 030c 	bic.w	r3, r3, #12
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6812      	ldr	r2, [r2, #0]
 8003896:	68b9      	ldr	r1, [r7, #8]
 8003898:	430b      	orrs	r3, r1
 800389a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699a      	ldr	r2, [r3, #24]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a2c      	ldr	r2, [pc, #176]	; (8003968 <UART_SetConfig+0x114>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d103      	bne.n	80038c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80038bc:	f7fe fd4c 	bl	8002358 <HAL_RCC_GetPCLK2Freq>
 80038c0:	60f8      	str	r0, [r7, #12]
 80038c2:	e002      	b.n	80038ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80038c4:	f7fe fd34 	bl	8002330 <HAL_RCC_GetPCLK1Freq>
 80038c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	009a      	lsls	r2, r3, #2
 80038d4:	441a      	add	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e0:	4a22      	ldr	r2, [pc, #136]	; (800396c <UART_SetConfig+0x118>)
 80038e2:	fba2 2303 	umull	r2, r3, r2, r3
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	0119      	lsls	r1, r3, #4
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	009a      	lsls	r2, r3, #2
 80038f4:	441a      	add	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003900:	4b1a      	ldr	r3, [pc, #104]	; (800396c <UART_SetConfig+0x118>)
 8003902:	fba3 0302 	umull	r0, r3, r3, r2
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	2064      	movs	r0, #100	; 0x64
 800390a:	fb00 f303 	mul.w	r3, r0, r3
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	3332      	adds	r3, #50	; 0x32
 8003914:	4a15      	ldr	r2, [pc, #84]	; (800396c <UART_SetConfig+0x118>)
 8003916:	fba2 2303 	umull	r2, r3, r2, r3
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003920:	4419      	add	r1, r3
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	009a      	lsls	r2, r3, #2
 800392c:	441a      	add	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	fbb2 f2f3 	udiv	r2, r2, r3
 8003938:	4b0c      	ldr	r3, [pc, #48]	; (800396c <UART_SetConfig+0x118>)
 800393a:	fba3 0302 	umull	r0, r3, r3, r2
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	2064      	movs	r0, #100	; 0x64
 8003942:	fb00 f303 	mul.w	r3, r0, r3
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	3332      	adds	r3, #50	; 0x32
 800394c:	4a07      	ldr	r2, [pc, #28]	; (800396c <UART_SetConfig+0x118>)
 800394e:	fba2 2303 	umull	r2, r3, r2, r3
 8003952:	095b      	lsrs	r3, r3, #5
 8003954:	f003 020f 	and.w	r2, r3, #15
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	440a      	add	r2, r1
 800395e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003960:	bf00      	nop
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40013800 	.word	0x40013800
 800396c:	51eb851f 	.word	0x51eb851f

08003970 <siprintf>:
 8003970:	b40e      	push	{r1, r2, r3}
 8003972:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003976:	b500      	push	{lr}
 8003978:	b09c      	sub	sp, #112	; 0x70
 800397a:	ab1d      	add	r3, sp, #116	; 0x74
 800397c:	9002      	str	r0, [sp, #8]
 800397e:	9006      	str	r0, [sp, #24]
 8003980:	9107      	str	r1, [sp, #28]
 8003982:	9104      	str	r1, [sp, #16]
 8003984:	4808      	ldr	r0, [pc, #32]	; (80039a8 <siprintf+0x38>)
 8003986:	4909      	ldr	r1, [pc, #36]	; (80039ac <siprintf+0x3c>)
 8003988:	f853 2b04 	ldr.w	r2, [r3], #4
 800398c:	9105      	str	r1, [sp, #20]
 800398e:	6800      	ldr	r0, [r0, #0]
 8003990:	a902      	add	r1, sp, #8
 8003992:	9301      	str	r3, [sp, #4]
 8003994:	f000 f98e 	bl	8003cb4 <_svfiprintf_r>
 8003998:	2200      	movs	r2, #0
 800399a:	9b02      	ldr	r3, [sp, #8]
 800399c:	701a      	strb	r2, [r3, #0]
 800399e:	b01c      	add	sp, #112	; 0x70
 80039a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80039a4:	b003      	add	sp, #12
 80039a6:	4770      	bx	lr
 80039a8:	20000058 	.word	0x20000058
 80039ac:	ffff0208 	.word	0xffff0208

080039b0 <memset>:
 80039b0:	4603      	mov	r3, r0
 80039b2:	4402      	add	r2, r0
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d100      	bne.n	80039ba <memset+0xa>
 80039b8:	4770      	bx	lr
 80039ba:	f803 1b01 	strb.w	r1, [r3], #1
 80039be:	e7f9      	b.n	80039b4 <memset+0x4>

080039c0 <__errno>:
 80039c0:	4b01      	ldr	r3, [pc, #4]	; (80039c8 <__errno+0x8>)
 80039c2:	6818      	ldr	r0, [r3, #0]
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	20000058 	.word	0x20000058

080039cc <__libc_init_array>:
 80039cc:	b570      	push	{r4, r5, r6, lr}
 80039ce:	2600      	movs	r6, #0
 80039d0:	4d0c      	ldr	r5, [pc, #48]	; (8003a04 <__libc_init_array+0x38>)
 80039d2:	4c0d      	ldr	r4, [pc, #52]	; (8003a08 <__libc_init_array+0x3c>)
 80039d4:	1b64      	subs	r4, r4, r5
 80039d6:	10a4      	asrs	r4, r4, #2
 80039d8:	42a6      	cmp	r6, r4
 80039da:	d109      	bne.n	80039f0 <__libc_init_array+0x24>
 80039dc:	f000 fc7a 	bl	80042d4 <_init>
 80039e0:	2600      	movs	r6, #0
 80039e2:	4d0a      	ldr	r5, [pc, #40]	; (8003a0c <__libc_init_array+0x40>)
 80039e4:	4c0a      	ldr	r4, [pc, #40]	; (8003a10 <__libc_init_array+0x44>)
 80039e6:	1b64      	subs	r4, r4, r5
 80039e8:	10a4      	asrs	r4, r4, #2
 80039ea:	42a6      	cmp	r6, r4
 80039ec:	d105      	bne.n	80039fa <__libc_init_array+0x2e>
 80039ee:	bd70      	pop	{r4, r5, r6, pc}
 80039f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f4:	4798      	blx	r3
 80039f6:	3601      	adds	r6, #1
 80039f8:	e7ee      	b.n	80039d8 <__libc_init_array+0xc>
 80039fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80039fe:	4798      	blx	r3
 8003a00:	3601      	adds	r6, #1
 8003a02:	e7f2      	b.n	80039ea <__libc_init_array+0x1e>
 8003a04:	08004358 	.word	0x08004358
 8003a08:	08004358 	.word	0x08004358
 8003a0c:	08004358 	.word	0x08004358
 8003a10:	0800435c 	.word	0x0800435c

08003a14 <__retarget_lock_acquire_recursive>:
 8003a14:	4770      	bx	lr

08003a16 <__retarget_lock_release_recursive>:
 8003a16:	4770      	bx	lr

08003a18 <_free_r>:
 8003a18:	b538      	push	{r3, r4, r5, lr}
 8003a1a:	4605      	mov	r5, r0
 8003a1c:	2900      	cmp	r1, #0
 8003a1e:	d040      	beq.n	8003aa2 <_free_r+0x8a>
 8003a20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a24:	1f0c      	subs	r4, r1, #4
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	bfb8      	it	lt
 8003a2a:	18e4      	addlt	r4, r4, r3
 8003a2c:	f000 f8dc 	bl	8003be8 <__malloc_lock>
 8003a30:	4a1c      	ldr	r2, [pc, #112]	; (8003aa4 <_free_r+0x8c>)
 8003a32:	6813      	ldr	r3, [r2, #0]
 8003a34:	b933      	cbnz	r3, 8003a44 <_free_r+0x2c>
 8003a36:	6063      	str	r3, [r4, #4]
 8003a38:	6014      	str	r4, [r2, #0]
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a40:	f000 b8d8 	b.w	8003bf4 <__malloc_unlock>
 8003a44:	42a3      	cmp	r3, r4
 8003a46:	d908      	bls.n	8003a5a <_free_r+0x42>
 8003a48:	6820      	ldr	r0, [r4, #0]
 8003a4a:	1821      	adds	r1, r4, r0
 8003a4c:	428b      	cmp	r3, r1
 8003a4e:	bf01      	itttt	eq
 8003a50:	6819      	ldreq	r1, [r3, #0]
 8003a52:	685b      	ldreq	r3, [r3, #4]
 8003a54:	1809      	addeq	r1, r1, r0
 8003a56:	6021      	streq	r1, [r4, #0]
 8003a58:	e7ed      	b.n	8003a36 <_free_r+0x1e>
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	b10b      	cbz	r3, 8003a64 <_free_r+0x4c>
 8003a60:	42a3      	cmp	r3, r4
 8003a62:	d9fa      	bls.n	8003a5a <_free_r+0x42>
 8003a64:	6811      	ldr	r1, [r2, #0]
 8003a66:	1850      	adds	r0, r2, r1
 8003a68:	42a0      	cmp	r0, r4
 8003a6a:	d10b      	bne.n	8003a84 <_free_r+0x6c>
 8003a6c:	6820      	ldr	r0, [r4, #0]
 8003a6e:	4401      	add	r1, r0
 8003a70:	1850      	adds	r0, r2, r1
 8003a72:	4283      	cmp	r3, r0
 8003a74:	6011      	str	r1, [r2, #0]
 8003a76:	d1e0      	bne.n	8003a3a <_free_r+0x22>
 8003a78:	6818      	ldr	r0, [r3, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	4408      	add	r0, r1
 8003a7e:	6010      	str	r0, [r2, #0]
 8003a80:	6053      	str	r3, [r2, #4]
 8003a82:	e7da      	b.n	8003a3a <_free_r+0x22>
 8003a84:	d902      	bls.n	8003a8c <_free_r+0x74>
 8003a86:	230c      	movs	r3, #12
 8003a88:	602b      	str	r3, [r5, #0]
 8003a8a:	e7d6      	b.n	8003a3a <_free_r+0x22>
 8003a8c:	6820      	ldr	r0, [r4, #0]
 8003a8e:	1821      	adds	r1, r4, r0
 8003a90:	428b      	cmp	r3, r1
 8003a92:	bf01      	itttt	eq
 8003a94:	6819      	ldreq	r1, [r3, #0]
 8003a96:	685b      	ldreq	r3, [r3, #4]
 8003a98:	1809      	addeq	r1, r1, r0
 8003a9a:	6021      	streq	r1, [r4, #0]
 8003a9c:	6063      	str	r3, [r4, #4]
 8003a9e:	6054      	str	r4, [r2, #4]
 8003aa0:	e7cb      	b.n	8003a3a <_free_r+0x22>
 8003aa2:	bd38      	pop	{r3, r4, r5, pc}
 8003aa4:	20000378 	.word	0x20000378

08003aa8 <sbrk_aligned>:
 8003aa8:	b570      	push	{r4, r5, r6, lr}
 8003aaa:	4e0e      	ldr	r6, [pc, #56]	; (8003ae4 <sbrk_aligned+0x3c>)
 8003aac:	460c      	mov	r4, r1
 8003aae:	6831      	ldr	r1, [r6, #0]
 8003ab0:	4605      	mov	r5, r0
 8003ab2:	b911      	cbnz	r1, 8003aba <sbrk_aligned+0x12>
 8003ab4:	f000 fbaa 	bl	800420c <_sbrk_r>
 8003ab8:	6030      	str	r0, [r6, #0]
 8003aba:	4621      	mov	r1, r4
 8003abc:	4628      	mov	r0, r5
 8003abe:	f000 fba5 	bl	800420c <_sbrk_r>
 8003ac2:	1c43      	adds	r3, r0, #1
 8003ac4:	d00a      	beq.n	8003adc <sbrk_aligned+0x34>
 8003ac6:	1cc4      	adds	r4, r0, #3
 8003ac8:	f024 0403 	bic.w	r4, r4, #3
 8003acc:	42a0      	cmp	r0, r4
 8003ace:	d007      	beq.n	8003ae0 <sbrk_aligned+0x38>
 8003ad0:	1a21      	subs	r1, r4, r0
 8003ad2:	4628      	mov	r0, r5
 8003ad4:	f000 fb9a 	bl	800420c <_sbrk_r>
 8003ad8:	3001      	adds	r0, #1
 8003ada:	d101      	bne.n	8003ae0 <sbrk_aligned+0x38>
 8003adc:	f04f 34ff 	mov.w	r4, #4294967295
 8003ae0:	4620      	mov	r0, r4
 8003ae2:	bd70      	pop	{r4, r5, r6, pc}
 8003ae4:	2000037c 	.word	0x2000037c

08003ae8 <_malloc_r>:
 8003ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003aec:	1ccd      	adds	r5, r1, #3
 8003aee:	f025 0503 	bic.w	r5, r5, #3
 8003af2:	3508      	adds	r5, #8
 8003af4:	2d0c      	cmp	r5, #12
 8003af6:	bf38      	it	cc
 8003af8:	250c      	movcc	r5, #12
 8003afa:	2d00      	cmp	r5, #0
 8003afc:	4607      	mov	r7, r0
 8003afe:	db01      	blt.n	8003b04 <_malloc_r+0x1c>
 8003b00:	42a9      	cmp	r1, r5
 8003b02:	d905      	bls.n	8003b10 <_malloc_r+0x28>
 8003b04:	230c      	movs	r3, #12
 8003b06:	2600      	movs	r6, #0
 8003b08:	603b      	str	r3, [r7, #0]
 8003b0a:	4630      	mov	r0, r6
 8003b0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003be4 <_malloc_r+0xfc>
 8003b14:	f000 f868 	bl	8003be8 <__malloc_lock>
 8003b18:	f8d8 3000 	ldr.w	r3, [r8]
 8003b1c:	461c      	mov	r4, r3
 8003b1e:	bb5c      	cbnz	r4, 8003b78 <_malloc_r+0x90>
 8003b20:	4629      	mov	r1, r5
 8003b22:	4638      	mov	r0, r7
 8003b24:	f7ff ffc0 	bl	8003aa8 <sbrk_aligned>
 8003b28:	1c43      	adds	r3, r0, #1
 8003b2a:	4604      	mov	r4, r0
 8003b2c:	d155      	bne.n	8003bda <_malloc_r+0xf2>
 8003b2e:	f8d8 4000 	ldr.w	r4, [r8]
 8003b32:	4626      	mov	r6, r4
 8003b34:	2e00      	cmp	r6, #0
 8003b36:	d145      	bne.n	8003bc4 <_malloc_r+0xdc>
 8003b38:	2c00      	cmp	r4, #0
 8003b3a:	d048      	beq.n	8003bce <_malloc_r+0xe6>
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	4631      	mov	r1, r6
 8003b40:	4638      	mov	r0, r7
 8003b42:	eb04 0903 	add.w	r9, r4, r3
 8003b46:	f000 fb61 	bl	800420c <_sbrk_r>
 8003b4a:	4581      	cmp	r9, r0
 8003b4c:	d13f      	bne.n	8003bce <_malloc_r+0xe6>
 8003b4e:	6821      	ldr	r1, [r4, #0]
 8003b50:	4638      	mov	r0, r7
 8003b52:	1a6d      	subs	r5, r5, r1
 8003b54:	4629      	mov	r1, r5
 8003b56:	f7ff ffa7 	bl	8003aa8 <sbrk_aligned>
 8003b5a:	3001      	adds	r0, #1
 8003b5c:	d037      	beq.n	8003bce <_malloc_r+0xe6>
 8003b5e:	6823      	ldr	r3, [r4, #0]
 8003b60:	442b      	add	r3, r5
 8003b62:	6023      	str	r3, [r4, #0]
 8003b64:	f8d8 3000 	ldr.w	r3, [r8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d038      	beq.n	8003bde <_malloc_r+0xf6>
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	42a2      	cmp	r2, r4
 8003b70:	d12b      	bne.n	8003bca <_malloc_r+0xe2>
 8003b72:	2200      	movs	r2, #0
 8003b74:	605a      	str	r2, [r3, #4]
 8003b76:	e00f      	b.n	8003b98 <_malloc_r+0xb0>
 8003b78:	6822      	ldr	r2, [r4, #0]
 8003b7a:	1b52      	subs	r2, r2, r5
 8003b7c:	d41f      	bmi.n	8003bbe <_malloc_r+0xd6>
 8003b7e:	2a0b      	cmp	r2, #11
 8003b80:	d917      	bls.n	8003bb2 <_malloc_r+0xca>
 8003b82:	1961      	adds	r1, r4, r5
 8003b84:	42a3      	cmp	r3, r4
 8003b86:	6025      	str	r5, [r4, #0]
 8003b88:	bf18      	it	ne
 8003b8a:	6059      	strne	r1, [r3, #4]
 8003b8c:	6863      	ldr	r3, [r4, #4]
 8003b8e:	bf08      	it	eq
 8003b90:	f8c8 1000 	streq.w	r1, [r8]
 8003b94:	5162      	str	r2, [r4, r5]
 8003b96:	604b      	str	r3, [r1, #4]
 8003b98:	4638      	mov	r0, r7
 8003b9a:	f104 060b 	add.w	r6, r4, #11
 8003b9e:	f000 f829 	bl	8003bf4 <__malloc_unlock>
 8003ba2:	f026 0607 	bic.w	r6, r6, #7
 8003ba6:	1d23      	adds	r3, r4, #4
 8003ba8:	1af2      	subs	r2, r6, r3
 8003baa:	d0ae      	beq.n	8003b0a <_malloc_r+0x22>
 8003bac:	1b9b      	subs	r3, r3, r6
 8003bae:	50a3      	str	r3, [r4, r2]
 8003bb0:	e7ab      	b.n	8003b0a <_malloc_r+0x22>
 8003bb2:	42a3      	cmp	r3, r4
 8003bb4:	6862      	ldr	r2, [r4, #4]
 8003bb6:	d1dd      	bne.n	8003b74 <_malloc_r+0x8c>
 8003bb8:	f8c8 2000 	str.w	r2, [r8]
 8003bbc:	e7ec      	b.n	8003b98 <_malloc_r+0xb0>
 8003bbe:	4623      	mov	r3, r4
 8003bc0:	6864      	ldr	r4, [r4, #4]
 8003bc2:	e7ac      	b.n	8003b1e <_malloc_r+0x36>
 8003bc4:	4634      	mov	r4, r6
 8003bc6:	6876      	ldr	r6, [r6, #4]
 8003bc8:	e7b4      	b.n	8003b34 <_malloc_r+0x4c>
 8003bca:	4613      	mov	r3, r2
 8003bcc:	e7cc      	b.n	8003b68 <_malloc_r+0x80>
 8003bce:	230c      	movs	r3, #12
 8003bd0:	4638      	mov	r0, r7
 8003bd2:	603b      	str	r3, [r7, #0]
 8003bd4:	f000 f80e 	bl	8003bf4 <__malloc_unlock>
 8003bd8:	e797      	b.n	8003b0a <_malloc_r+0x22>
 8003bda:	6025      	str	r5, [r4, #0]
 8003bdc:	e7dc      	b.n	8003b98 <_malloc_r+0xb0>
 8003bde:	605b      	str	r3, [r3, #4]
 8003be0:	deff      	udf	#255	; 0xff
 8003be2:	bf00      	nop
 8003be4:	20000378 	.word	0x20000378

08003be8 <__malloc_lock>:
 8003be8:	4801      	ldr	r0, [pc, #4]	; (8003bf0 <__malloc_lock+0x8>)
 8003bea:	f7ff bf13 	b.w	8003a14 <__retarget_lock_acquire_recursive>
 8003bee:	bf00      	nop
 8003bf0:	20000374 	.word	0x20000374

08003bf4 <__malloc_unlock>:
 8003bf4:	4801      	ldr	r0, [pc, #4]	; (8003bfc <__malloc_unlock+0x8>)
 8003bf6:	f7ff bf0e 	b.w	8003a16 <__retarget_lock_release_recursive>
 8003bfa:	bf00      	nop
 8003bfc:	20000374 	.word	0x20000374

08003c00 <__ssputs_r>:
 8003c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c04:	461f      	mov	r7, r3
 8003c06:	688e      	ldr	r6, [r1, #8]
 8003c08:	4682      	mov	sl, r0
 8003c0a:	42be      	cmp	r6, r7
 8003c0c:	460c      	mov	r4, r1
 8003c0e:	4690      	mov	r8, r2
 8003c10:	680b      	ldr	r3, [r1, #0]
 8003c12:	d82c      	bhi.n	8003c6e <__ssputs_r+0x6e>
 8003c14:	898a      	ldrh	r2, [r1, #12]
 8003c16:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c1a:	d026      	beq.n	8003c6a <__ssputs_r+0x6a>
 8003c1c:	6965      	ldr	r5, [r4, #20]
 8003c1e:	6909      	ldr	r1, [r1, #16]
 8003c20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c24:	eba3 0901 	sub.w	r9, r3, r1
 8003c28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c2c:	1c7b      	adds	r3, r7, #1
 8003c2e:	444b      	add	r3, r9
 8003c30:	106d      	asrs	r5, r5, #1
 8003c32:	429d      	cmp	r5, r3
 8003c34:	bf38      	it	cc
 8003c36:	461d      	movcc	r5, r3
 8003c38:	0553      	lsls	r3, r2, #21
 8003c3a:	d527      	bpl.n	8003c8c <__ssputs_r+0x8c>
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	f7ff ff53 	bl	8003ae8 <_malloc_r>
 8003c42:	4606      	mov	r6, r0
 8003c44:	b360      	cbz	r0, 8003ca0 <__ssputs_r+0xa0>
 8003c46:	464a      	mov	r2, r9
 8003c48:	6921      	ldr	r1, [r4, #16]
 8003c4a:	f000 fafd 	bl	8004248 <memcpy>
 8003c4e:	89a3      	ldrh	r3, [r4, #12]
 8003c50:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c58:	81a3      	strh	r3, [r4, #12]
 8003c5a:	6126      	str	r6, [r4, #16]
 8003c5c:	444e      	add	r6, r9
 8003c5e:	6026      	str	r6, [r4, #0]
 8003c60:	463e      	mov	r6, r7
 8003c62:	6165      	str	r5, [r4, #20]
 8003c64:	eba5 0509 	sub.w	r5, r5, r9
 8003c68:	60a5      	str	r5, [r4, #8]
 8003c6a:	42be      	cmp	r6, r7
 8003c6c:	d900      	bls.n	8003c70 <__ssputs_r+0x70>
 8003c6e:	463e      	mov	r6, r7
 8003c70:	4632      	mov	r2, r6
 8003c72:	4641      	mov	r1, r8
 8003c74:	6820      	ldr	r0, [r4, #0]
 8003c76:	f000 faaf 	bl	80041d8 <memmove>
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	68a3      	ldr	r3, [r4, #8]
 8003c7e:	1b9b      	subs	r3, r3, r6
 8003c80:	60a3      	str	r3, [r4, #8]
 8003c82:	6823      	ldr	r3, [r4, #0]
 8003c84:	4433      	add	r3, r6
 8003c86:	6023      	str	r3, [r4, #0]
 8003c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c8c:	462a      	mov	r2, r5
 8003c8e:	f000 fae9 	bl	8004264 <_realloc_r>
 8003c92:	4606      	mov	r6, r0
 8003c94:	2800      	cmp	r0, #0
 8003c96:	d1e0      	bne.n	8003c5a <__ssputs_r+0x5a>
 8003c98:	4650      	mov	r0, sl
 8003c9a:	6921      	ldr	r1, [r4, #16]
 8003c9c:	f7ff febc 	bl	8003a18 <_free_r>
 8003ca0:	230c      	movs	r3, #12
 8003ca2:	f8ca 3000 	str.w	r3, [sl]
 8003ca6:	89a3      	ldrh	r3, [r4, #12]
 8003ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cb0:	81a3      	strh	r3, [r4, #12]
 8003cb2:	e7e9      	b.n	8003c88 <__ssputs_r+0x88>

08003cb4 <_svfiprintf_r>:
 8003cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cb8:	4698      	mov	r8, r3
 8003cba:	898b      	ldrh	r3, [r1, #12]
 8003cbc:	4607      	mov	r7, r0
 8003cbe:	061b      	lsls	r3, r3, #24
 8003cc0:	460d      	mov	r5, r1
 8003cc2:	4614      	mov	r4, r2
 8003cc4:	b09d      	sub	sp, #116	; 0x74
 8003cc6:	d50e      	bpl.n	8003ce6 <_svfiprintf_r+0x32>
 8003cc8:	690b      	ldr	r3, [r1, #16]
 8003cca:	b963      	cbnz	r3, 8003ce6 <_svfiprintf_r+0x32>
 8003ccc:	2140      	movs	r1, #64	; 0x40
 8003cce:	f7ff ff0b 	bl	8003ae8 <_malloc_r>
 8003cd2:	6028      	str	r0, [r5, #0]
 8003cd4:	6128      	str	r0, [r5, #16]
 8003cd6:	b920      	cbnz	r0, 8003ce2 <_svfiprintf_r+0x2e>
 8003cd8:	230c      	movs	r3, #12
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce0:	e0d0      	b.n	8003e84 <_svfiprintf_r+0x1d0>
 8003ce2:	2340      	movs	r3, #64	; 0x40
 8003ce4:	616b      	str	r3, [r5, #20]
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	9309      	str	r3, [sp, #36]	; 0x24
 8003cea:	2320      	movs	r3, #32
 8003cec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cf0:	2330      	movs	r3, #48	; 0x30
 8003cf2:	f04f 0901 	mov.w	r9, #1
 8003cf6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cfa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003e9c <_svfiprintf_r+0x1e8>
 8003cfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d02:	4623      	mov	r3, r4
 8003d04:	469a      	mov	sl, r3
 8003d06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d0a:	b10a      	cbz	r2, 8003d10 <_svfiprintf_r+0x5c>
 8003d0c:	2a25      	cmp	r2, #37	; 0x25
 8003d0e:	d1f9      	bne.n	8003d04 <_svfiprintf_r+0x50>
 8003d10:	ebba 0b04 	subs.w	fp, sl, r4
 8003d14:	d00b      	beq.n	8003d2e <_svfiprintf_r+0x7a>
 8003d16:	465b      	mov	r3, fp
 8003d18:	4622      	mov	r2, r4
 8003d1a:	4629      	mov	r1, r5
 8003d1c:	4638      	mov	r0, r7
 8003d1e:	f7ff ff6f 	bl	8003c00 <__ssputs_r>
 8003d22:	3001      	adds	r0, #1
 8003d24:	f000 80a9 	beq.w	8003e7a <_svfiprintf_r+0x1c6>
 8003d28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d2a:	445a      	add	r2, fp
 8003d2c:	9209      	str	r2, [sp, #36]	; 0x24
 8003d2e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 80a1 	beq.w	8003e7a <_svfiprintf_r+0x1c6>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d42:	f10a 0a01 	add.w	sl, sl, #1
 8003d46:	9304      	str	r3, [sp, #16]
 8003d48:	9307      	str	r3, [sp, #28]
 8003d4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d4e:	931a      	str	r3, [sp, #104]	; 0x68
 8003d50:	4654      	mov	r4, sl
 8003d52:	2205      	movs	r2, #5
 8003d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d58:	4850      	ldr	r0, [pc, #320]	; (8003e9c <_svfiprintf_r+0x1e8>)
 8003d5a:	f000 fa67 	bl	800422c <memchr>
 8003d5e:	9a04      	ldr	r2, [sp, #16]
 8003d60:	b9d8      	cbnz	r0, 8003d9a <_svfiprintf_r+0xe6>
 8003d62:	06d0      	lsls	r0, r2, #27
 8003d64:	bf44      	itt	mi
 8003d66:	2320      	movmi	r3, #32
 8003d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d6c:	0711      	lsls	r1, r2, #28
 8003d6e:	bf44      	itt	mi
 8003d70:	232b      	movmi	r3, #43	; 0x2b
 8003d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d76:	f89a 3000 	ldrb.w	r3, [sl]
 8003d7a:	2b2a      	cmp	r3, #42	; 0x2a
 8003d7c:	d015      	beq.n	8003daa <_svfiprintf_r+0xf6>
 8003d7e:	4654      	mov	r4, sl
 8003d80:	2000      	movs	r0, #0
 8003d82:	f04f 0c0a 	mov.w	ip, #10
 8003d86:	9a07      	ldr	r2, [sp, #28]
 8003d88:	4621      	mov	r1, r4
 8003d8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d8e:	3b30      	subs	r3, #48	; 0x30
 8003d90:	2b09      	cmp	r3, #9
 8003d92:	d94d      	bls.n	8003e30 <_svfiprintf_r+0x17c>
 8003d94:	b1b0      	cbz	r0, 8003dc4 <_svfiprintf_r+0x110>
 8003d96:	9207      	str	r2, [sp, #28]
 8003d98:	e014      	b.n	8003dc4 <_svfiprintf_r+0x110>
 8003d9a:	eba0 0308 	sub.w	r3, r0, r8
 8003d9e:	fa09 f303 	lsl.w	r3, r9, r3
 8003da2:	4313      	orrs	r3, r2
 8003da4:	46a2      	mov	sl, r4
 8003da6:	9304      	str	r3, [sp, #16]
 8003da8:	e7d2      	b.n	8003d50 <_svfiprintf_r+0x9c>
 8003daa:	9b03      	ldr	r3, [sp, #12]
 8003dac:	1d19      	adds	r1, r3, #4
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	9103      	str	r1, [sp, #12]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	bfbb      	ittet	lt
 8003db6:	425b      	neglt	r3, r3
 8003db8:	f042 0202 	orrlt.w	r2, r2, #2
 8003dbc:	9307      	strge	r3, [sp, #28]
 8003dbe:	9307      	strlt	r3, [sp, #28]
 8003dc0:	bfb8      	it	lt
 8003dc2:	9204      	strlt	r2, [sp, #16]
 8003dc4:	7823      	ldrb	r3, [r4, #0]
 8003dc6:	2b2e      	cmp	r3, #46	; 0x2e
 8003dc8:	d10c      	bne.n	8003de4 <_svfiprintf_r+0x130>
 8003dca:	7863      	ldrb	r3, [r4, #1]
 8003dcc:	2b2a      	cmp	r3, #42	; 0x2a
 8003dce:	d134      	bne.n	8003e3a <_svfiprintf_r+0x186>
 8003dd0:	9b03      	ldr	r3, [sp, #12]
 8003dd2:	3402      	adds	r4, #2
 8003dd4:	1d1a      	adds	r2, r3, #4
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	9203      	str	r2, [sp, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	bfb8      	it	lt
 8003dde:	f04f 33ff 	movlt.w	r3, #4294967295
 8003de2:	9305      	str	r3, [sp, #20]
 8003de4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003ea0 <_svfiprintf_r+0x1ec>
 8003de8:	2203      	movs	r2, #3
 8003dea:	4650      	mov	r0, sl
 8003dec:	7821      	ldrb	r1, [r4, #0]
 8003dee:	f000 fa1d 	bl	800422c <memchr>
 8003df2:	b138      	cbz	r0, 8003e04 <_svfiprintf_r+0x150>
 8003df4:	2240      	movs	r2, #64	; 0x40
 8003df6:	9b04      	ldr	r3, [sp, #16]
 8003df8:	eba0 000a 	sub.w	r0, r0, sl
 8003dfc:	4082      	lsls	r2, r0
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	3401      	adds	r4, #1
 8003e02:	9304      	str	r3, [sp, #16]
 8003e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e08:	2206      	movs	r2, #6
 8003e0a:	4826      	ldr	r0, [pc, #152]	; (8003ea4 <_svfiprintf_r+0x1f0>)
 8003e0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e10:	f000 fa0c 	bl	800422c <memchr>
 8003e14:	2800      	cmp	r0, #0
 8003e16:	d038      	beq.n	8003e8a <_svfiprintf_r+0x1d6>
 8003e18:	4b23      	ldr	r3, [pc, #140]	; (8003ea8 <_svfiprintf_r+0x1f4>)
 8003e1a:	bb1b      	cbnz	r3, 8003e64 <_svfiprintf_r+0x1b0>
 8003e1c:	9b03      	ldr	r3, [sp, #12]
 8003e1e:	3307      	adds	r3, #7
 8003e20:	f023 0307 	bic.w	r3, r3, #7
 8003e24:	3308      	adds	r3, #8
 8003e26:	9303      	str	r3, [sp, #12]
 8003e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e2a:	4433      	add	r3, r6
 8003e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e2e:	e768      	b.n	8003d02 <_svfiprintf_r+0x4e>
 8003e30:	460c      	mov	r4, r1
 8003e32:	2001      	movs	r0, #1
 8003e34:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e38:	e7a6      	b.n	8003d88 <_svfiprintf_r+0xd4>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	f04f 0c0a 	mov.w	ip, #10
 8003e40:	4619      	mov	r1, r3
 8003e42:	3401      	adds	r4, #1
 8003e44:	9305      	str	r3, [sp, #20]
 8003e46:	4620      	mov	r0, r4
 8003e48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e4c:	3a30      	subs	r2, #48	; 0x30
 8003e4e:	2a09      	cmp	r2, #9
 8003e50:	d903      	bls.n	8003e5a <_svfiprintf_r+0x1a6>
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0c6      	beq.n	8003de4 <_svfiprintf_r+0x130>
 8003e56:	9105      	str	r1, [sp, #20]
 8003e58:	e7c4      	b.n	8003de4 <_svfiprintf_r+0x130>
 8003e5a:	4604      	mov	r4, r0
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e62:	e7f0      	b.n	8003e46 <_svfiprintf_r+0x192>
 8003e64:	ab03      	add	r3, sp, #12
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	462a      	mov	r2, r5
 8003e6a:	4638      	mov	r0, r7
 8003e6c:	4b0f      	ldr	r3, [pc, #60]	; (8003eac <_svfiprintf_r+0x1f8>)
 8003e6e:	a904      	add	r1, sp, #16
 8003e70:	f3af 8000 	nop.w
 8003e74:	1c42      	adds	r2, r0, #1
 8003e76:	4606      	mov	r6, r0
 8003e78:	d1d6      	bne.n	8003e28 <_svfiprintf_r+0x174>
 8003e7a:	89ab      	ldrh	r3, [r5, #12]
 8003e7c:	065b      	lsls	r3, r3, #25
 8003e7e:	f53f af2d 	bmi.w	8003cdc <_svfiprintf_r+0x28>
 8003e82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e84:	b01d      	add	sp, #116	; 0x74
 8003e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e8a:	ab03      	add	r3, sp, #12
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	462a      	mov	r2, r5
 8003e90:	4638      	mov	r0, r7
 8003e92:	4b06      	ldr	r3, [pc, #24]	; (8003eac <_svfiprintf_r+0x1f8>)
 8003e94:	a904      	add	r1, sp, #16
 8003e96:	f000 f87d 	bl	8003f94 <_printf_i>
 8003e9a:	e7eb      	b.n	8003e74 <_svfiprintf_r+0x1c0>
 8003e9c:	08004322 	.word	0x08004322
 8003ea0:	08004328 	.word	0x08004328
 8003ea4:	0800432c 	.word	0x0800432c
 8003ea8:	00000000 	.word	0x00000000
 8003eac:	08003c01 	.word	0x08003c01

08003eb0 <_printf_common>:
 8003eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eb4:	4616      	mov	r6, r2
 8003eb6:	4699      	mov	r9, r3
 8003eb8:	688a      	ldr	r2, [r1, #8]
 8003eba:	690b      	ldr	r3, [r1, #16]
 8003ebc:	4607      	mov	r7, r0
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	bfb8      	it	lt
 8003ec2:	4613      	movlt	r3, r2
 8003ec4:	6033      	str	r3, [r6, #0]
 8003ec6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003eca:	460c      	mov	r4, r1
 8003ecc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ed0:	b10a      	cbz	r2, 8003ed6 <_printf_common+0x26>
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	6033      	str	r3, [r6, #0]
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	0699      	lsls	r1, r3, #26
 8003eda:	bf42      	ittt	mi
 8003edc:	6833      	ldrmi	r3, [r6, #0]
 8003ede:	3302      	addmi	r3, #2
 8003ee0:	6033      	strmi	r3, [r6, #0]
 8003ee2:	6825      	ldr	r5, [r4, #0]
 8003ee4:	f015 0506 	ands.w	r5, r5, #6
 8003ee8:	d106      	bne.n	8003ef8 <_printf_common+0x48>
 8003eea:	f104 0a19 	add.w	sl, r4, #25
 8003eee:	68e3      	ldr	r3, [r4, #12]
 8003ef0:	6832      	ldr	r2, [r6, #0]
 8003ef2:	1a9b      	subs	r3, r3, r2
 8003ef4:	42ab      	cmp	r3, r5
 8003ef6:	dc2b      	bgt.n	8003f50 <_printf_common+0xa0>
 8003ef8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003efc:	1e13      	subs	r3, r2, #0
 8003efe:	6822      	ldr	r2, [r4, #0]
 8003f00:	bf18      	it	ne
 8003f02:	2301      	movne	r3, #1
 8003f04:	0692      	lsls	r2, r2, #26
 8003f06:	d430      	bmi.n	8003f6a <_printf_common+0xba>
 8003f08:	4649      	mov	r1, r9
 8003f0a:	4638      	mov	r0, r7
 8003f0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f10:	47c0      	blx	r8
 8003f12:	3001      	adds	r0, #1
 8003f14:	d023      	beq.n	8003f5e <_printf_common+0xae>
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	6922      	ldr	r2, [r4, #16]
 8003f1a:	f003 0306 	and.w	r3, r3, #6
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	bf14      	ite	ne
 8003f22:	2500      	movne	r5, #0
 8003f24:	6833      	ldreq	r3, [r6, #0]
 8003f26:	f04f 0600 	mov.w	r6, #0
 8003f2a:	bf08      	it	eq
 8003f2c:	68e5      	ldreq	r5, [r4, #12]
 8003f2e:	f104 041a 	add.w	r4, r4, #26
 8003f32:	bf08      	it	eq
 8003f34:	1aed      	subeq	r5, r5, r3
 8003f36:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003f3a:	bf08      	it	eq
 8003f3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f40:	4293      	cmp	r3, r2
 8003f42:	bfc4      	itt	gt
 8003f44:	1a9b      	subgt	r3, r3, r2
 8003f46:	18ed      	addgt	r5, r5, r3
 8003f48:	42b5      	cmp	r5, r6
 8003f4a:	d11a      	bne.n	8003f82 <_printf_common+0xd2>
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	e008      	b.n	8003f62 <_printf_common+0xb2>
 8003f50:	2301      	movs	r3, #1
 8003f52:	4652      	mov	r2, sl
 8003f54:	4649      	mov	r1, r9
 8003f56:	4638      	mov	r0, r7
 8003f58:	47c0      	blx	r8
 8003f5a:	3001      	adds	r0, #1
 8003f5c:	d103      	bne.n	8003f66 <_printf_common+0xb6>
 8003f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f66:	3501      	adds	r5, #1
 8003f68:	e7c1      	b.n	8003eee <_printf_common+0x3e>
 8003f6a:	2030      	movs	r0, #48	; 0x30
 8003f6c:	18e1      	adds	r1, r4, r3
 8003f6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f78:	4422      	add	r2, r4
 8003f7a:	3302      	adds	r3, #2
 8003f7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f80:	e7c2      	b.n	8003f08 <_printf_common+0x58>
 8003f82:	2301      	movs	r3, #1
 8003f84:	4622      	mov	r2, r4
 8003f86:	4649      	mov	r1, r9
 8003f88:	4638      	mov	r0, r7
 8003f8a:	47c0      	blx	r8
 8003f8c:	3001      	adds	r0, #1
 8003f8e:	d0e6      	beq.n	8003f5e <_printf_common+0xae>
 8003f90:	3601      	adds	r6, #1
 8003f92:	e7d9      	b.n	8003f48 <_printf_common+0x98>

08003f94 <_printf_i>:
 8003f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f98:	7e0f      	ldrb	r7, [r1, #24]
 8003f9a:	4691      	mov	r9, r2
 8003f9c:	2f78      	cmp	r7, #120	; 0x78
 8003f9e:	4680      	mov	r8, r0
 8003fa0:	460c      	mov	r4, r1
 8003fa2:	469a      	mov	sl, r3
 8003fa4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fa6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003faa:	d807      	bhi.n	8003fbc <_printf_i+0x28>
 8003fac:	2f62      	cmp	r7, #98	; 0x62
 8003fae:	d80a      	bhi.n	8003fc6 <_printf_i+0x32>
 8003fb0:	2f00      	cmp	r7, #0
 8003fb2:	f000 80d5 	beq.w	8004160 <_printf_i+0x1cc>
 8003fb6:	2f58      	cmp	r7, #88	; 0x58
 8003fb8:	f000 80c1 	beq.w	800413e <_printf_i+0x1aa>
 8003fbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fc4:	e03a      	b.n	800403c <_printf_i+0xa8>
 8003fc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fca:	2b15      	cmp	r3, #21
 8003fcc:	d8f6      	bhi.n	8003fbc <_printf_i+0x28>
 8003fce:	a101      	add	r1, pc, #4	; (adr r1, 8003fd4 <_printf_i+0x40>)
 8003fd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fd4:	0800402d 	.word	0x0800402d
 8003fd8:	08004041 	.word	0x08004041
 8003fdc:	08003fbd 	.word	0x08003fbd
 8003fe0:	08003fbd 	.word	0x08003fbd
 8003fe4:	08003fbd 	.word	0x08003fbd
 8003fe8:	08003fbd 	.word	0x08003fbd
 8003fec:	08004041 	.word	0x08004041
 8003ff0:	08003fbd 	.word	0x08003fbd
 8003ff4:	08003fbd 	.word	0x08003fbd
 8003ff8:	08003fbd 	.word	0x08003fbd
 8003ffc:	08003fbd 	.word	0x08003fbd
 8004000:	08004147 	.word	0x08004147
 8004004:	0800406d 	.word	0x0800406d
 8004008:	08004101 	.word	0x08004101
 800400c:	08003fbd 	.word	0x08003fbd
 8004010:	08003fbd 	.word	0x08003fbd
 8004014:	08004169 	.word	0x08004169
 8004018:	08003fbd 	.word	0x08003fbd
 800401c:	0800406d 	.word	0x0800406d
 8004020:	08003fbd 	.word	0x08003fbd
 8004024:	08003fbd 	.word	0x08003fbd
 8004028:	08004109 	.word	0x08004109
 800402c:	682b      	ldr	r3, [r5, #0]
 800402e:	1d1a      	adds	r2, r3, #4
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	602a      	str	r2, [r5, #0]
 8004034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800403c:	2301      	movs	r3, #1
 800403e:	e0a0      	b.n	8004182 <_printf_i+0x1ee>
 8004040:	6820      	ldr	r0, [r4, #0]
 8004042:	682b      	ldr	r3, [r5, #0]
 8004044:	0607      	lsls	r7, r0, #24
 8004046:	f103 0104 	add.w	r1, r3, #4
 800404a:	6029      	str	r1, [r5, #0]
 800404c:	d501      	bpl.n	8004052 <_printf_i+0xbe>
 800404e:	681e      	ldr	r6, [r3, #0]
 8004050:	e003      	b.n	800405a <_printf_i+0xc6>
 8004052:	0646      	lsls	r6, r0, #25
 8004054:	d5fb      	bpl.n	800404e <_printf_i+0xba>
 8004056:	f9b3 6000 	ldrsh.w	r6, [r3]
 800405a:	2e00      	cmp	r6, #0
 800405c:	da03      	bge.n	8004066 <_printf_i+0xd2>
 800405e:	232d      	movs	r3, #45	; 0x2d
 8004060:	4276      	negs	r6, r6
 8004062:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004066:	230a      	movs	r3, #10
 8004068:	4859      	ldr	r0, [pc, #356]	; (80041d0 <_printf_i+0x23c>)
 800406a:	e012      	b.n	8004092 <_printf_i+0xfe>
 800406c:	682b      	ldr	r3, [r5, #0]
 800406e:	6820      	ldr	r0, [r4, #0]
 8004070:	1d19      	adds	r1, r3, #4
 8004072:	6029      	str	r1, [r5, #0]
 8004074:	0605      	lsls	r5, r0, #24
 8004076:	d501      	bpl.n	800407c <_printf_i+0xe8>
 8004078:	681e      	ldr	r6, [r3, #0]
 800407a:	e002      	b.n	8004082 <_printf_i+0xee>
 800407c:	0641      	lsls	r1, r0, #25
 800407e:	d5fb      	bpl.n	8004078 <_printf_i+0xe4>
 8004080:	881e      	ldrh	r6, [r3, #0]
 8004082:	2f6f      	cmp	r7, #111	; 0x6f
 8004084:	bf0c      	ite	eq
 8004086:	2308      	moveq	r3, #8
 8004088:	230a      	movne	r3, #10
 800408a:	4851      	ldr	r0, [pc, #324]	; (80041d0 <_printf_i+0x23c>)
 800408c:	2100      	movs	r1, #0
 800408e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004092:	6865      	ldr	r5, [r4, #4]
 8004094:	2d00      	cmp	r5, #0
 8004096:	bfa8      	it	ge
 8004098:	6821      	ldrge	r1, [r4, #0]
 800409a:	60a5      	str	r5, [r4, #8]
 800409c:	bfa4      	itt	ge
 800409e:	f021 0104 	bicge.w	r1, r1, #4
 80040a2:	6021      	strge	r1, [r4, #0]
 80040a4:	b90e      	cbnz	r6, 80040aa <_printf_i+0x116>
 80040a6:	2d00      	cmp	r5, #0
 80040a8:	d04b      	beq.n	8004142 <_printf_i+0x1ae>
 80040aa:	4615      	mov	r5, r2
 80040ac:	fbb6 f1f3 	udiv	r1, r6, r3
 80040b0:	fb03 6711 	mls	r7, r3, r1, r6
 80040b4:	5dc7      	ldrb	r7, [r0, r7]
 80040b6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040ba:	4637      	mov	r7, r6
 80040bc:	42bb      	cmp	r3, r7
 80040be:	460e      	mov	r6, r1
 80040c0:	d9f4      	bls.n	80040ac <_printf_i+0x118>
 80040c2:	2b08      	cmp	r3, #8
 80040c4:	d10b      	bne.n	80040de <_printf_i+0x14a>
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	07de      	lsls	r6, r3, #31
 80040ca:	d508      	bpl.n	80040de <_printf_i+0x14a>
 80040cc:	6923      	ldr	r3, [r4, #16]
 80040ce:	6861      	ldr	r1, [r4, #4]
 80040d0:	4299      	cmp	r1, r3
 80040d2:	bfde      	ittt	le
 80040d4:	2330      	movle	r3, #48	; 0x30
 80040d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80040de:	1b52      	subs	r2, r2, r5
 80040e0:	6122      	str	r2, [r4, #16]
 80040e2:	464b      	mov	r3, r9
 80040e4:	4621      	mov	r1, r4
 80040e6:	4640      	mov	r0, r8
 80040e8:	f8cd a000 	str.w	sl, [sp]
 80040ec:	aa03      	add	r2, sp, #12
 80040ee:	f7ff fedf 	bl	8003eb0 <_printf_common>
 80040f2:	3001      	adds	r0, #1
 80040f4:	d14a      	bne.n	800418c <_printf_i+0x1f8>
 80040f6:	f04f 30ff 	mov.w	r0, #4294967295
 80040fa:	b004      	add	sp, #16
 80040fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	f043 0320 	orr.w	r3, r3, #32
 8004106:	6023      	str	r3, [r4, #0]
 8004108:	2778      	movs	r7, #120	; 0x78
 800410a:	4832      	ldr	r0, [pc, #200]	; (80041d4 <_printf_i+0x240>)
 800410c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004110:	6823      	ldr	r3, [r4, #0]
 8004112:	6829      	ldr	r1, [r5, #0]
 8004114:	061f      	lsls	r7, r3, #24
 8004116:	f851 6b04 	ldr.w	r6, [r1], #4
 800411a:	d402      	bmi.n	8004122 <_printf_i+0x18e>
 800411c:	065f      	lsls	r7, r3, #25
 800411e:	bf48      	it	mi
 8004120:	b2b6      	uxthmi	r6, r6
 8004122:	07df      	lsls	r7, r3, #31
 8004124:	bf48      	it	mi
 8004126:	f043 0320 	orrmi.w	r3, r3, #32
 800412a:	6029      	str	r1, [r5, #0]
 800412c:	bf48      	it	mi
 800412e:	6023      	strmi	r3, [r4, #0]
 8004130:	b91e      	cbnz	r6, 800413a <_printf_i+0x1a6>
 8004132:	6823      	ldr	r3, [r4, #0]
 8004134:	f023 0320 	bic.w	r3, r3, #32
 8004138:	6023      	str	r3, [r4, #0]
 800413a:	2310      	movs	r3, #16
 800413c:	e7a6      	b.n	800408c <_printf_i+0xf8>
 800413e:	4824      	ldr	r0, [pc, #144]	; (80041d0 <_printf_i+0x23c>)
 8004140:	e7e4      	b.n	800410c <_printf_i+0x178>
 8004142:	4615      	mov	r5, r2
 8004144:	e7bd      	b.n	80040c2 <_printf_i+0x12e>
 8004146:	682b      	ldr	r3, [r5, #0]
 8004148:	6826      	ldr	r6, [r4, #0]
 800414a:	1d18      	adds	r0, r3, #4
 800414c:	6961      	ldr	r1, [r4, #20]
 800414e:	6028      	str	r0, [r5, #0]
 8004150:	0635      	lsls	r5, r6, #24
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	d501      	bpl.n	800415a <_printf_i+0x1c6>
 8004156:	6019      	str	r1, [r3, #0]
 8004158:	e002      	b.n	8004160 <_printf_i+0x1cc>
 800415a:	0670      	lsls	r0, r6, #25
 800415c:	d5fb      	bpl.n	8004156 <_printf_i+0x1c2>
 800415e:	8019      	strh	r1, [r3, #0]
 8004160:	2300      	movs	r3, #0
 8004162:	4615      	mov	r5, r2
 8004164:	6123      	str	r3, [r4, #16]
 8004166:	e7bc      	b.n	80040e2 <_printf_i+0x14e>
 8004168:	682b      	ldr	r3, [r5, #0]
 800416a:	2100      	movs	r1, #0
 800416c:	1d1a      	adds	r2, r3, #4
 800416e:	602a      	str	r2, [r5, #0]
 8004170:	681d      	ldr	r5, [r3, #0]
 8004172:	6862      	ldr	r2, [r4, #4]
 8004174:	4628      	mov	r0, r5
 8004176:	f000 f859 	bl	800422c <memchr>
 800417a:	b108      	cbz	r0, 8004180 <_printf_i+0x1ec>
 800417c:	1b40      	subs	r0, r0, r5
 800417e:	6060      	str	r0, [r4, #4]
 8004180:	6863      	ldr	r3, [r4, #4]
 8004182:	6123      	str	r3, [r4, #16]
 8004184:	2300      	movs	r3, #0
 8004186:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800418a:	e7aa      	b.n	80040e2 <_printf_i+0x14e>
 800418c:	462a      	mov	r2, r5
 800418e:	4649      	mov	r1, r9
 8004190:	4640      	mov	r0, r8
 8004192:	6923      	ldr	r3, [r4, #16]
 8004194:	47d0      	blx	sl
 8004196:	3001      	adds	r0, #1
 8004198:	d0ad      	beq.n	80040f6 <_printf_i+0x162>
 800419a:	6823      	ldr	r3, [r4, #0]
 800419c:	079b      	lsls	r3, r3, #30
 800419e:	d413      	bmi.n	80041c8 <_printf_i+0x234>
 80041a0:	68e0      	ldr	r0, [r4, #12]
 80041a2:	9b03      	ldr	r3, [sp, #12]
 80041a4:	4298      	cmp	r0, r3
 80041a6:	bfb8      	it	lt
 80041a8:	4618      	movlt	r0, r3
 80041aa:	e7a6      	b.n	80040fa <_printf_i+0x166>
 80041ac:	2301      	movs	r3, #1
 80041ae:	4632      	mov	r2, r6
 80041b0:	4649      	mov	r1, r9
 80041b2:	4640      	mov	r0, r8
 80041b4:	47d0      	blx	sl
 80041b6:	3001      	adds	r0, #1
 80041b8:	d09d      	beq.n	80040f6 <_printf_i+0x162>
 80041ba:	3501      	adds	r5, #1
 80041bc:	68e3      	ldr	r3, [r4, #12]
 80041be:	9903      	ldr	r1, [sp, #12]
 80041c0:	1a5b      	subs	r3, r3, r1
 80041c2:	42ab      	cmp	r3, r5
 80041c4:	dcf2      	bgt.n	80041ac <_printf_i+0x218>
 80041c6:	e7eb      	b.n	80041a0 <_printf_i+0x20c>
 80041c8:	2500      	movs	r5, #0
 80041ca:	f104 0619 	add.w	r6, r4, #25
 80041ce:	e7f5      	b.n	80041bc <_printf_i+0x228>
 80041d0:	08004333 	.word	0x08004333
 80041d4:	08004344 	.word	0x08004344

080041d8 <memmove>:
 80041d8:	4288      	cmp	r0, r1
 80041da:	b510      	push	{r4, lr}
 80041dc:	eb01 0402 	add.w	r4, r1, r2
 80041e0:	d902      	bls.n	80041e8 <memmove+0x10>
 80041e2:	4284      	cmp	r4, r0
 80041e4:	4623      	mov	r3, r4
 80041e6:	d807      	bhi.n	80041f8 <memmove+0x20>
 80041e8:	1e43      	subs	r3, r0, #1
 80041ea:	42a1      	cmp	r1, r4
 80041ec:	d008      	beq.n	8004200 <memmove+0x28>
 80041ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041f6:	e7f8      	b.n	80041ea <memmove+0x12>
 80041f8:	4601      	mov	r1, r0
 80041fa:	4402      	add	r2, r0
 80041fc:	428a      	cmp	r2, r1
 80041fe:	d100      	bne.n	8004202 <memmove+0x2a>
 8004200:	bd10      	pop	{r4, pc}
 8004202:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004206:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800420a:	e7f7      	b.n	80041fc <memmove+0x24>

0800420c <_sbrk_r>:
 800420c:	b538      	push	{r3, r4, r5, lr}
 800420e:	2300      	movs	r3, #0
 8004210:	4d05      	ldr	r5, [pc, #20]	; (8004228 <_sbrk_r+0x1c>)
 8004212:	4604      	mov	r4, r0
 8004214:	4608      	mov	r0, r1
 8004216:	602b      	str	r3, [r5, #0]
 8004218:	f7fc fad0 	bl	80007bc <_sbrk>
 800421c:	1c43      	adds	r3, r0, #1
 800421e:	d102      	bne.n	8004226 <_sbrk_r+0x1a>
 8004220:	682b      	ldr	r3, [r5, #0]
 8004222:	b103      	cbz	r3, 8004226 <_sbrk_r+0x1a>
 8004224:	6023      	str	r3, [r4, #0]
 8004226:	bd38      	pop	{r3, r4, r5, pc}
 8004228:	20000370 	.word	0x20000370

0800422c <memchr>:
 800422c:	4603      	mov	r3, r0
 800422e:	b510      	push	{r4, lr}
 8004230:	b2c9      	uxtb	r1, r1
 8004232:	4402      	add	r2, r0
 8004234:	4293      	cmp	r3, r2
 8004236:	4618      	mov	r0, r3
 8004238:	d101      	bne.n	800423e <memchr+0x12>
 800423a:	2000      	movs	r0, #0
 800423c:	e003      	b.n	8004246 <memchr+0x1a>
 800423e:	7804      	ldrb	r4, [r0, #0]
 8004240:	3301      	adds	r3, #1
 8004242:	428c      	cmp	r4, r1
 8004244:	d1f6      	bne.n	8004234 <memchr+0x8>
 8004246:	bd10      	pop	{r4, pc}

08004248 <memcpy>:
 8004248:	440a      	add	r2, r1
 800424a:	4291      	cmp	r1, r2
 800424c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004250:	d100      	bne.n	8004254 <memcpy+0xc>
 8004252:	4770      	bx	lr
 8004254:	b510      	push	{r4, lr}
 8004256:	f811 4b01 	ldrb.w	r4, [r1], #1
 800425a:	4291      	cmp	r1, r2
 800425c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004260:	d1f9      	bne.n	8004256 <memcpy+0xe>
 8004262:	bd10      	pop	{r4, pc}

08004264 <_realloc_r>:
 8004264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004268:	4680      	mov	r8, r0
 800426a:	4614      	mov	r4, r2
 800426c:	460e      	mov	r6, r1
 800426e:	b921      	cbnz	r1, 800427a <_realloc_r+0x16>
 8004270:	4611      	mov	r1, r2
 8004272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004276:	f7ff bc37 	b.w	8003ae8 <_malloc_r>
 800427a:	b92a      	cbnz	r2, 8004288 <_realloc_r+0x24>
 800427c:	f7ff fbcc 	bl	8003a18 <_free_r>
 8004280:	4625      	mov	r5, r4
 8004282:	4628      	mov	r0, r5
 8004284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004288:	f000 f81b 	bl	80042c2 <_malloc_usable_size_r>
 800428c:	4284      	cmp	r4, r0
 800428e:	4607      	mov	r7, r0
 8004290:	d802      	bhi.n	8004298 <_realloc_r+0x34>
 8004292:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004296:	d812      	bhi.n	80042be <_realloc_r+0x5a>
 8004298:	4621      	mov	r1, r4
 800429a:	4640      	mov	r0, r8
 800429c:	f7ff fc24 	bl	8003ae8 <_malloc_r>
 80042a0:	4605      	mov	r5, r0
 80042a2:	2800      	cmp	r0, #0
 80042a4:	d0ed      	beq.n	8004282 <_realloc_r+0x1e>
 80042a6:	42bc      	cmp	r4, r7
 80042a8:	4622      	mov	r2, r4
 80042aa:	4631      	mov	r1, r6
 80042ac:	bf28      	it	cs
 80042ae:	463a      	movcs	r2, r7
 80042b0:	f7ff ffca 	bl	8004248 <memcpy>
 80042b4:	4631      	mov	r1, r6
 80042b6:	4640      	mov	r0, r8
 80042b8:	f7ff fbae 	bl	8003a18 <_free_r>
 80042bc:	e7e1      	b.n	8004282 <_realloc_r+0x1e>
 80042be:	4635      	mov	r5, r6
 80042c0:	e7df      	b.n	8004282 <_realloc_r+0x1e>

080042c2 <_malloc_usable_size_r>:
 80042c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042c6:	1f18      	subs	r0, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	bfbc      	itt	lt
 80042cc:	580b      	ldrlt	r3, [r1, r0]
 80042ce:	18c0      	addlt	r0, r0, r3
 80042d0:	4770      	bx	lr
	...

080042d4 <_init>:
 80042d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042d6:	bf00      	nop
 80042d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042da:	bc08      	pop	{r3}
 80042dc:	469e      	mov	lr, r3
 80042de:	4770      	bx	lr

080042e0 <_fini>:
 80042e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e2:	bf00      	nop
 80042e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042e6:	bc08      	pop	{r3}
 80042e8:	469e      	mov	lr, r3
 80042ea:	4770      	bx	lr
